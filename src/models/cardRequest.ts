/**
 * Paypal Merged APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, optional, Schema, string } from '../schema';
import { CardAttributes, cardAttributesSchema } from './cardAttributes';
import { CardBrandEnum, cardBrandEnumSchema } from './cardBrandEnum';
import {
  CardExperienceContext,
  cardExperienceContextSchema,
} from './cardExperienceContext';
import { CardTypeEnum, cardTypeEnumSchema } from './cardTypeEnum';
import { NetworkToken, networkTokenSchema } from './networkToken';
import {
  PortableInternationalPostalAddress,
  portableInternationalPostalAddressSchema,
} from './portableInternationalPostalAddress';
import {
  StoredPaymentSource,
  storedPaymentSourceSchema,
} from './storedPaymentSource';

/** The payment card to use to fund a payment. Can be a credit or debit card.<blockquote><strong>Note:</strong> Passing card number, cvv and expiry directly via the API requires <a href="https://www.pcisecuritystandards.org/pci_security/completing_self_assessment"> PCI SAQ D compliance</a>. <br>*PayPal offers a mechanism by which you do not have to take on the <strong>PCI SAQ D</strong> burden by using hosted fields - refer to <a href="https://developer.paypal.com/docs/checkout/advanced/integrate/">this Integration Guide</a>*.</blockquote> */
export interface CardRequest {
  /** The PayPal-generated ID for the card. */
  id?: string;
  /** The card holder's name as it appears on the card. */
  name?: string;
  /** The primary account number (PAN) for the payment card. */
  number?: string;
  /** The card expiration year and month, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6). */
  expiry?: string;
  /** The three- or four-digit security code of the card. Also known as the CVV, CVC, CVN, CVE, or CID. This parameter cannot be present in the request when `payment_initiator=MERCHANT`. */
  securityCode?: string;
  /** The last digits of the payment card. */
  lastDigits?: string;
  /** The card brand or network. Typically used in the response. */
  cardType?: CardBrandEnum;
  /** The payment card type. */
  type?: CardTypeEnum;
  /** The card brand or network. Typically used in the response. */
  brand?: CardBrandEnum;
  /** The address of the payer. Supports only the `address_line_1`, `address_line_2`, `admin_area_1`, `admin_area_2`, `postal_code`, and `country_code` properties. Also referred to as the billing address of the customer. */
  billingAddress?: PortableInternationalPostalAddress;
  /** Additional attributes associated with the use of this card. */
  attributes?: CardAttributes;
  /** The PayPal-generated ID for the saved card payment source. Typically stored on the merchant's server. */
  vaultId?: string;
  /** Provides additional details to process a payment using a `payment_source` that has been stored or is intended to be stored (also referred to as stored_credential or card-on-file).<br/>Parameter compatibility:<br/>`payment_type=ONE_TIME` is compatible only with `payment_initiator=CUSTOMER`. `usage=FIRST` is compatible only with `payment_initiator=CUSTOMER`. `previous_transaction_reference` or `previous_network_transaction_reference` is compatible only with `payment_initiator=MERCHANT`. Only one of the parameters - `previous_transaction_reference` and `previous_network_transaction_reference` - can be present in the request. */
  storedCredential?: StoredPaymentSource;
  /** A 3rd party network token refers to a network token that the merchant provisions from and vaults with an external TSP (Token Service Provider) other than PayPal. */
  networkToken?: NetworkToken;
  /** Customizes the payer experience during the 3DS Approval for payment. */
  experienceContext?: CardExperienceContext;
}

export const cardRequestSchema: Schema<CardRequest> = object({
  id: ['id', optional(string())],
  name: ['name', optional(string())],
  number: ['number', optional(string())],
  expiry: ['expiry', optional(string())],
  securityCode: ['security_code', optional(string())],
  lastDigits: ['last_digits', optional(string())],
  cardType: ['card_type', optional(cardBrandEnumSchema)],
  type: ['type', optional(cardTypeEnumSchema)],
  brand: ['brand', optional(cardBrandEnumSchema)],
  billingAddress: [
    'billing_address',
    optional(lazy(() => portableInternationalPostalAddressSchema)),
  ],
  attributes: ['attributes', optional(lazy(() => cardAttributesSchema))],
  vaultId: ['vault_id', optional(string())],
  storedCredential: [
    'stored_credential',
    optional(lazy(() => storedPaymentSourceSchema)),
  ],
  networkToken: ['network_token', optional(lazy(() => networkTokenSchema))],
  experienceContext: [
    'experience_context',
    optional(lazy(() => cardExperienceContextSchema)),
  ],
});
