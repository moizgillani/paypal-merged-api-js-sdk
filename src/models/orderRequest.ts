/**
 * Paypal Merged APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, lazy, object, optional, Schema } from '../schema';
import {
  ApplicationContext,
  applicationContextSchema,
} from './applicationContext';
import { Payer, payerSchema } from './payer';
import {
  PaymentIntentCheckoutEnum,
  paymentIntentCheckoutEnumSchema,
} from './paymentIntentCheckoutEnum';
import {
  PaymentSourceDefinition,
  paymentSourceDefinitionSchema,
} from './paymentSourceDefinition';
import {
  PurchaseUnitRequest,
  purchaseUnitRequestSchema,
} from './purchaseUnitRequest';

/** The order request details. */
export interface OrderRequest {
  /** The intent to either capture payment immediately or authorize a payment for an order after order creation. */
  intent: PaymentIntentCheckoutEnum;
  /** DEPRECATED. The customer is also known as the payer. The Payer object was intended to only be used with the `payment_source.paypal` object. In order to make this design more clear, the details in the `payer` object are now available under `payment_source.paypal`. Please use `payment_source.paypal`. */
  payer?: Payer;
  /** An array of purchase units. Each purchase unit establishes a contract between a payer and the payee. Each purchase unit represents either a full or partial order that the payer intends to purchase from the payee. */
  purchaseUnits: PurchaseUnitRequest[];
  /** The payment source definition. */
  paymentSource?: PaymentSourceDefinition;
  /** Customize the payer experience during the approval process for the payment with PayPal. */
  applicationContext?: ApplicationContext;
}

export const orderRequestSchema: Schema<OrderRequest> = object({
  intent: ['intent', paymentIntentCheckoutEnumSchema],
  payer: ['payer', optional(lazy(() => payerSchema))],
  purchaseUnits: [
    'purchase_units',
    array(lazy(() => purchaseUnitRequestSchema)),
  ],
  paymentSource: [
    'payment_source',
    optional(lazy(() => paymentSourceDefinitionSchema)),
  ],
  applicationContext: [
    'application_context',
    optional(lazy(() => applicationContextSchema)),
  ],
});
