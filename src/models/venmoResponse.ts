/**
 * Paypal Merged APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { boolean, lazy, object, optional, Schema, string } from '../schema';
import { PartyName, partyNameSchema } from './partyName';
import { PhoneWithType, phoneWithTypeSchema } from './phoneWithType';
import {
  PortablePostalAddressMediumGrained,
  portablePostalAddressMediumGrainedSchema,
} from './portablePostalAddressMediumGrained';
import {
  ShippingDetailsPaymentMethodTokens,
  shippingDetailsPaymentMethodTokensSchema,
} from './shippingDetailsPaymentMethodTokens';
import {
  TaxInformationPaymentMethodTokens,
  taxInformationPaymentMethodTokensSchema,
} from './taxInformationPaymentMethodTokens';

/** Full representation of a Venmo Payment Token. */
export interface VenmoResponse {
  /** The description displayed to the consumer on the approval flow for a digital wallet, as well as on the merchant view of the payment token management experience. exp: PayPal.com. */
  description?: string;
  /** The shipping address for the Payer. */
  shipping?: ShippingDetailsPaymentMethodTokens;
  /** Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same PayPal account. This only applies to PayPal payment source. */
  permitMultiplePaymentTokens?: boolean;
  /** The usage type associated with a digital wallet payment token. */
  usageType?: string;
  /** The customer type associated with a digital wallet payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer. */
  customerType?: string;
  /** The email address of the payer. */
  emailAddress?: string;
  /** The PayPal-assigned ID for the payer. */
  payerId?: string;
  /** The name of the payer. Supports only the `given_name` and `surname` properties. */
  name?: PartyName;
  /** The phone number of the customer. Available only when you enable the **Contact Telephone Number** option in the <a href="https://www.paypal.com/cgi-bin/customerprofileweb?cmd=_profile-website-payments">**Profile & Settings**</a> for the merchant's PayPal account. The `phone.phone_number` supports only `national_number`. */
  phone?: PhoneWithType;
  /** The birth date of the payer in `YYYY-MM-DD` format. */
  birthDate?: string;
  /** The tax information of the payer. Required only for Brazilian payer's. Both `tax_id` and `tax_id_type` are required. */
  taxInfo?: TaxInformationPaymentMethodTokens;
  /** The address of the payer. Supports only the `address_line_1`, `address_line_2`, `admin_area_1`, `admin_area_2`, `postal_code`, and `country_code` properties. Also referred to as the billing address of the customer. */
  address?: PortablePostalAddressMediumGrained;
  /** The Venmo username, as chosen by the user. */
  userName?: string;
}

export const venmoResponseSchema: Schema<VenmoResponse> = object({
  description: ['description', optional(string())],
  shipping: [
    'shipping',
    optional(lazy(() => shippingDetailsPaymentMethodTokensSchema)),
  ],
  permitMultiplePaymentTokens: [
    'permit_multiple_payment_tokens',
    optional(boolean()),
  ],
  usageType: ['usage_type', optional(string())],
  customerType: ['customer_type', optional(string())],
  emailAddress: ['email_address', optional(string())],
  payerId: ['payer_id', optional(string())],
  name: ['name', optional(lazy(() => partyNameSchema))],
  phone: ['phone', optional(lazy(() => phoneWithTypeSchema))],
  birthDate: ['birth_date', optional(string())],
  taxInfo: [
    'tax_info',
    optional(lazy(() => taxInformationPaymentMethodTokensSchema)),
  ],
  address: [
    'address',
    optional(lazy(() => portablePostalAddressMediumGrainedSchema)),
  ],
  userName: ['user_name', optional(string())],
});
