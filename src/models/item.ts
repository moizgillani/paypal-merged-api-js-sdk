/**
 * Paypal Merged APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, optional, Schema, string } from '../schema';
import { ItemCategoryEnum, itemCategoryEnumSchema } from './itemCategoryEnum';
import { Money, moneySchema } from './money';

/** The details for the items to be purchased. */
export interface Item {
  /** The item name or title. */
  name: string;
  /** The item price or rate per unit. If you specify <code>unit_amount</code>, <code>purchase_units[].amount.breakdown.item_total</code> is required. Must equal <code>unit_amount * quantity</code> for all items. <code>unit_amount.value</code> can not be a negative number. */
  unitAmount: Money;
  /** The item tax for each unit. If <code>tax</code> is specified, <code>purchase_units[].amount.breakdown.tax_total</code> is required. Must equal <code>tax * quantity</code> for all items. <code>tax.value</code> can not be a negative number. */
  tax?: Money;
  /** The item quantity. Must be a whole number. */
  quantity: string;
  /** The detailed item description. */
  description?: string;
  /** The stock keeping unit (SKU) for the item. */
  sku?: string;
  /** The item category type. */
  category?: ItemCategoryEnum;
}

export const itemSchema: Schema<Item> = object({
  name: ['name', string()],
  unitAmount: ['unit_amount', lazy(() => moneySchema)],
  tax: ['tax', optional(lazy(() => moneySchema))],
  quantity: ['quantity', string()],
  description: ['description', optional(string())],
  sku: ['sku', optional(string())],
  category: ['category', optional(itemCategoryEnumSchema)],
});
