/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, optional, Schema, string } from '../schema';
import { CardBrandEnum, cardBrandEnumSchema } from './cardBrandEnum';
import { CardTypeEnum, cardTypeEnumSchema } from './cardTypeEnum';
import {
  ExperienceContextPaymentMethodTokens,
  experienceContextPaymentMethodTokensSchema,
} from './experienceContextPaymentMethodTokens';
import {
  PortablePostalAddressMediumGrained,
  portablePostalAddressMediumGrainedSchema,
} from './portablePostalAddressMediumGrained';

/** A Resource representing a request to vault a Card. */
export interface CardRequestPaymentMethodTokens {
  /** The PayPal-generated ID for the card. */
  id?: string;
  /** The card holder's name as it appears on the card. */
  name?: string;
  /** The primary account number (PAN) for the payment card. */
  number?: string;
  /** The card expiration year and month, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6). */
  expiry?: string;
  /** The three- or four-digit security code of the card. Also known as the CVV, CVC, CVN, CVE, or CID. This parameter cannot be present in the request when `payment_initiator=MERCHANT`. */
  securityCode?: string;
  /** The last digits of the payment card. */
  lastDigits?: string;
  /** The card brand or network. Typically used in the response. */
  cardType?: CardBrandEnum;
  /** The payment card type. */
  type?: CardTypeEnum;
  /** The card brand or network. Typically used in the response. */
  brand?: CardBrandEnum;
  /** The billing address for this card. Supports only the `address_line_1`, `address_line_2`, `admin_area_1`, `admin_area_2`, `postal_code`, and `country_code` properties. */
  billingAddress?: PortablePostalAddressMediumGrained;
  /** The API caller can opt in to verify the payment token through PayPal offered verification services (e.g. Smart Dollar Auth, 3DS). */
  verificationMethod?: string;
  /** Customizes the Vault creation flow experience for your customers. */
  experienceContext?: ExperienceContextPaymentMethodTokens;
}

export const cardRequestPaymentMethodTokensSchema: Schema<CardRequestPaymentMethodTokens> = object(
  {
    id: ['id', optional(string())],
    name: ['name', optional(string())],
    number: ['number', optional(string())],
    expiry: ['expiry', optional(string())],
    securityCode: ['security_code', optional(string())],
    lastDigits: ['last_digits', optional(string())],
    cardType: ['card_type', optional(cardBrandEnumSchema)],
    type: ['type', optional(cardTypeEnumSchema)],
    brand: ['brand', optional(cardBrandEnumSchema)],
    billingAddress: [
      'billing_address',
      optional(lazy(() => portablePostalAddressMediumGrainedSchema)),
    ],
    verificationMethod: ['verification_method', optional(string())],
    experienceContext: [
      'experience_context',
      optional(lazy(() => experienceContextPaymentMethodTokensSchema)),
    ],
  }
);
