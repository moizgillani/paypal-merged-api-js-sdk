/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import {
  AGREEMENTALREADYCANCELLEDRESULT,
  aGREEMENTALREADYCANCELLEDRESULTSchema,
} from '../aGREEMENTALREADYCANCELLEDRESULT';
import {
  APPLEPAYAMOUNTMISMATCHERRORRESPONSE,
  aPPLEPAYAMOUNTMISMATCHERRORRESPONSESchema,
} from '../aPPLEPAYAMOUNTMISMATCHERRORRESPONSE';
import {
  AUTHCAPTURENOTENABLEDERRORRESPONSE,
  aUTHCAPTURENOTENABLEDERRORRESPONSESchema,
} from '../aUTHCAPTURENOTENABLEDERRORRESPONSE';
import {
  BANKNOTSUPPORTEDFORVERIFICATIONERROR,
  bANKNOTSUPPORTEDFORVERIFICATIONERRORSchema,
} from '../bANKNOTSUPPORTEDFORVERIFICATIONERROR';
import {
  BILLINGAGREEMENTIDMISMATCHERROR,
  bILLINGAGREEMENTIDMISMATCHERRORSchema,
} from '../bILLINGAGREEMENTIDMISMATCHERROR';
import {
  BILLINGAGREEMENTNOTFOUNDRESULT,
  bILLINGAGREEMENTNOTFOUNDRESULTSchema,
} from '../bILLINGAGREEMENTNOTFOUNDRESULT';
import {
  CANCELURLREQUIREDERRORRESPONSE,
  cANCELURLREQUIREDERRORRESPONSESchema,
} from '../cANCELURLREQUIREDERRORRESPONSE';
import {
  CARDBRANDNOTSUPPORTEDERROR,
  cARDBRANDNOTSUPPORTEDERRORSchema,
} from '../cARDBRANDNOTSUPPORTEDERROR';
import {
  CARDEXPIRYREQUIREDERRORRESPONSE,
  cARDEXPIRYREQUIREDERRORRESPONSESchema,
} from '../cARDEXPIRYREQUIREDERRORRESPONSE';
import {
  CARDNUMBERREQUIREDERRORRESPONSE,
  cARDNUMBERREQUIREDERRORRESPONSESchema,
} from '../cARDNUMBERREQUIREDERRORRESPONSE';
import {
  CHARGEBACKONPREVIOUSTRANSREFERRORRESPONSE,
  cHARGEBACKONPREVIOUSTRANSREFERRORRESPONSESchema,
} from '../cHARGEBACKONPREVIOUSTRANSREFERRORRESPONSE';
import {
  COMPLIANCEVIOLATIONERROR,
  cOMPLIANCEVIOLATIONERRORSchema,
} from '../cOMPLIANCEVIOLATIONERROR';
import {
  CURRENCYNOTSUPPORTEDFORBANKERROR,
  cURRENCYNOTSUPPORTEDFORBANKERRORSchema,
} from '../cURRENCYNOTSUPPORTEDFORBANKERROR';
import {
  DECLINEDDUETORELATEDTXNERROR,
  dECLINEDDUETORELATEDTXNERRORSchema,
} from '../dECLINEDDUETORELATEDTXNERROR';
import {
  DOMESTICTRANSACTIONREQUIREDERRORRESPONSE,
  dOMESTICTRANSACTIONREQUIREDERRORRESPONSESchema,
} from '../dOMESTICTRANSACTIONREQUIREDERRORRESPONSE';
import {
  DUPLICATEINVOICEIDERRORRESPONSE,
  dUPLICATEINVOICEIDERRORRESPONSESchema,
} from '../dUPLICATEINVOICEIDERRORRESPONSE';
import {
  IBANCOUNTRYNOTSUPPORTEDERROR,
  iBANCOUNTRYNOTSUPPORTEDERRORSchema,
} from '../iBANCOUNTRYNOTSUPPORTEDERROR';
import {
  IDENTIFIERNOTFOUND,
  iDENTIFIERNOTFOUNDSchema,
} from '../iDENTIFIERNOTFOUND';
import {
  INCOMPATIBLEPARAMETERVALUEERRORRESPONSE,
  iNCOMPATIBLEPARAMETERVALUEERRORRESPONSESchema,
} from '../iNCOMPATIBLEPARAMETERVALUEERRORRESPONSE';
import {
  INSTRUMENTDECLINEDERROR,
  iNSTRUMENTDECLINEDERRORSchema,
} from '../iNSTRUMENTDECLINEDERROR';
import { INVALIDIBANERROR, iNVALIDIBANERRORSchema } from '../iNVALIDIBANERROR';
import {
  INVALIDPICKUPADDRESSERROR,
  iNVALIDPICKUPADDRESSERRORSchema,
} from '../iNVALIDPICKUPADDRESSERROR';
import {
  INVALIDPREVTRANSREFERRORRESPONSE,
  iNVALIDPREVTRANSREFERRORRESPONSESchema,
} from '../iNVALIDPREVTRANSREFERRORRESPONSE';
import {
  INVALIDSECURITYCODELENGTHERRORRESPONSE,
  iNVALIDSECURITYCODELENGTHERRORRESPONSESchema,
} from '../iNVALIDSECURITYCODELENGTHERRORRESPONSE';
import {
  MAXPAYMENTATTEMPTSEXCEEDEDERRORRESPONSE,
  mAXPAYMENTATTEMPTSEXCEEDEDERRORRESPONSESchema,
} from '../mAXPAYMENTATTEMPTSEXCEEDEDERRORRESPONSE';
import {
  MERCHANTINITIATEDAUTHRESULTSERRORRESPONSE,
  mERCHANTINITIATEDAUTHRESULTSERRORRESPONSESchema,
} from '../mERCHANTINITIATEDAUTHRESULTSERRORRESPONSE';
import {
  MERCHANTINITIATEDMULTIPURCHASEUNITSERRORRESP,
  mERCHANTINITIATEDMULTIPURCHASEUNITSERRORRESPSchema,
} from '../mERCHANTINITIATEDMULTIPURCHASEUNITSERRORRESP';
import {
  MERCHANTINITIATEDSECURITYCODEERRORRESPONSE,
  mERCHANTINITIATEDSECURITYCODEERRORRESPONSESchema,
} from '../mERCHANTINITIATEDSECURITYCODEERRORRESPONSE';
import {
  MISSINGCRYPTOGRAMERRORRESPONSE,
  mISSINGCRYPTOGRAMERRORRESPONSESchema,
} from '../mISSINGCRYPTOGRAMERRORRESPONSE';
import {
  MISSINGPARAMCIPERRORRESP,
  mISSINGPARAMCIPERRORRESPSchema,
} from '../mISSINGPARAMCIPERRORRESP';
import {
  MISSINGPREVIOUSREFERENCEERRORRESPONSE,
  mISSINGPREVIOUSREFERENCEERRORRESPONSESchema,
} from '../mISSINGPREVIOUSREFERENCEERRORRESPONSE';
import {
  NOTELIGIBLEFORPNREFPROCESSINGERRORRESPONSE,
  nOTELIGIBLEFORPNREFPROCESSINGERRORRESPONSESchema,
} from '../nOTELIGIBLEFORPNREFPROCESSINGERRORRESPONSE';
import {
  NOTENABLEDFORBANKPROCESSING,
  nOTENABLEDFORBANKPROCESSINGSchema,
} from '../nOTENABLEDFORBANKPROCESSING';
import {
  NOTENABLEDFORCARDPROCESSING,
  nOTENABLEDFORCARDPROCESSINGSchema,
} from '../nOTENABLEDFORCARDPROCESSING';
import {
  ONLYONEBANKSOURCEALLOWEDERROR,
  oNLYONEBANKSOURCEALLOWEDERRORSchema,
} from '../oNLYONEBANKSOURCEALLOWEDERROR';
import {
  ORDERALREADYCAPTUREDERROR,
  oRDERALREADYCAPTUREDERRORSchema,
} from '../oRDERALREADYCAPTUREDERROR';
import {
  ORDERCOMPLETIONINPROGRESS,
  oRDERCOMPLETIONINPROGRESSSchema,
} from '../oRDERCOMPLETIONINPROGRESS';
import {
  ORDERNOTAPPROVEDERROR,
  oRDERNOTAPPROVEDERRORSchema,
} from '../oRDERNOTAPPROVEDERROR';
import {
  PAYEEBLOCKEDTRANSACTIONERRORRESPONSE,
  pAYEEBLOCKEDTRANSACTIONERRORRESPONSESchema,
} from '../pAYEEBLOCKEDTRANSACTIONERRORRESPONSE';
import {
  PAYEEFXRATEIDEXPIREDERRORRESPONSE,
  pAYEEFXRATEIDEXPIREDERRORRESPONSESchema,
} from '../pAYEEFXRATEIDEXPIREDERRORRESPONSE';
import {
  PAYEENOTENABLEDFORBANKPROCESSING,
  pAYEENOTENABLEDFORBANKPROCESSINGSchema,
} from '../pAYEENOTENABLEDFORBANKPROCESSING';
import {
  PAYEENOTENABLEDFORCARDPROCESSING,
  pAYEENOTENABLEDFORCARDPROCESSINGSchema,
} from '../pAYEENOTENABLEDFORCARDPROCESSING';
import {
  PAYERACCOUNTLOCKEDORCLOSEDERRORRESPONSE,
  pAYERACCOUNTLOCKEDORCLOSEDERRORRESPONSESchema,
} from '../pAYERACCOUNTLOCKEDORCLOSEDERRORRESPONSE';
import {
  PAYERACCOUNTRESTRICTEDERRORRESPONSE,
  pAYERACCOUNTRESTRICTEDERRORRESPONSESchema,
} from '../pAYERACCOUNTRESTRICTEDERRORRESPONSE';
import {
  PAYERACTIONREQUIREDERROR,
  pAYERACTIONREQUIREDERRORSchema,
} from '../pAYERACTIONREQUIREDERROR';
import {
  PAYERCANNOTPAYERRORRESPONSE,
  pAYERCANNOTPAYERRORRESPONSESchema,
} from '../pAYERCANNOTPAYERRORRESPONSE';
import {
  PAYMENTSOURCEMISMATCHERRORRESPONSE,
  pAYMENTSOURCEMISMATCHERRORRESPONSESchema,
} from '../pAYMENTSOURCEMISMATCHERRORRESPONSE';
import {
  PAYMENTSOURCENOTSUPPORTED,
  pAYMENTSOURCENOTSUPPORTEDSchema,
} from '../pAYMENTSOURCENOTSUPPORTED';
import {
  PAYPALIDPROCESSINGINELIGIBILITYERRORRESPONSE,
  pAYPALIDPROCESSINGINELIGIBILITYERRORRESPONSESchema,
} from '../pAYPALIDPROCESSINGINELIGIBILITYERRORRESPONSE';
import {
  PAYPALTRANSACTIONIDEXPIREDERROR,
  pAYPALTRANSACTIONIDEXPIREDERRORSchema,
} from '../pAYPALTRANSACTIONIDEXPIREDERROR';
import {
  PAYPALTRANSACTIONIDNOTFOUNDERRORRESPONSE,
  pAYPALTRANSACTIONIDNOTFOUNDERRORRESPONSESchema,
} from '../pAYPALTRANSACTIONIDNOTFOUNDERRORRESPONSE';
import {
  PLATFORMFEEPAYEECANNOTBESAMEASPAYER,
  pLATFORMFEEPAYEECANNOTBESAMEASPAYERSchema,
} from '../pLATFORMFEEPAYEECANNOTBESAMEASPAYER';
import {
  PNREFEXPIREDERROR,
  pNREFEXPIREDERRORSchema,
} from '../pNREFEXPIREDERROR';
import {
  PNREFNOTFOUNDERRORRESPONSE,
  pNREFNOTFOUNDERRORRESPONSESchema,
} from '../pNREFNOTFOUNDERRORRESPONSE';
import {
  PREFERREDPAYMENTSOURCEMISMATCHERROR,
  pREFERREDPAYMENTSOURCEMISMATCHERRORSchema,
} from '../pREFERREDPAYMENTSOURCEMISMATCHERROR';
import {
  REDIRECTPAYERFORALTERNATEFUNDING,
  rEDIRECTPAYERFORALTERNATEFUNDINGSchema,
} from '../rEDIRECTPAYERFORALTERNATEFUNDING';
import {
  REFERENCEDCARDEXPIREDERROR,
  rEFERENCEDCARDEXPIREDERRORSchema,
} from '../rEFERENCEDCARDEXPIREDERROR';
import {
  RETURNURLREQUIREDERRORRESPONSE,
  rETURNURLREQUIREDERRORRESPONSESchema,
} from '../rETURNURLREQUIREDERRORRESPONSE';
import {
  SETUPERRORFORBANKERROR,
  sETUPERRORFORBANKERRORSchema,
} from '../sETUPERRORFORBANKERROR';
import {
  SHIPPINGADDRESSINVALIDERRORRESPONSE,
  sHIPPINGADDRESSINVALIDERRORRESPONSESchema,
} from '../sHIPPINGADDRESSINVALIDERRORRESPONSE';
import {
  TOKENIDNOTFOUNDERROR,
  tOKENIDNOTFOUNDERRORSchema,
} from '../tOKENIDNOTFOUNDERROR';
import {
  TRANSACTIONBLOCKEDBYPAYEEERROR,
  tRANSACTIONBLOCKEDBYPAYEEERRORSchema,
} from '../tRANSACTIONBLOCKEDBYPAYEEERROR';
import {
  TRANSACTIONLIMITEXCEEDEDERRORRESPONSE,
  tRANSACTIONLIMITEXCEEDEDERRORRESPONSESchema,
} from '../tRANSACTIONLIMITEXCEEDEDERRORRESPONSE';
import {
  TRANSACTIONRECEIVELIMITEXCEEDEDERRORRESPONSE,
  tRANSACTIONRECEIVELIMITEXCEEDEDERRORRESPONSESchema,
} from '../tRANSACTIONRECEIVELIMITEXCEEDEDERRORRESPONSE';
import {
  TRANSACTIONREFUSEDERRORRESPONSE,
  tRANSACTIONREFUSEDERRORRESPONSESchema,
} from '../tRANSACTIONREFUSEDERRORRESPONSE';
import {
  VAULTIDPAYMENTSOURCEMISMATCHERRORRESPONSE,
  vAULTIDPAYMENTSOURCEMISMATCHERRORRESPONSESchema,
} from '../vAULTIDPAYMENTSOURCEMISMATCHERRORRESPONSE';
import {
  VAULTINSTRUCTIONREQUIREDERRORRESPONSE,
  vAULTINSTRUCTIONREQUIREDERRORRESPONSESchema,
} from '../vAULTINSTRUCTIONREQUIREDERRORRESPONSE';
import {
  VOIDEDPREVTRANSREFERRORRESPONSE,
  vOIDEDPREVTRANSREFERRORRESPONSESchema,
} from '../vOIDEDPREVTRANSREFERRORRESPONSE';

/** This is a container type for any-of types. */
export type OrdersCapture422IssuesItems = AGREEMENTALREADYCANCELLEDRESULT | BILLINGAGREEMENTNOTFOUNDRESULT | DECLINEDDUETORELATEDTXNERROR | MISSINGPREVIOUSREFERENCEERRORRESPONSE | MISSINGCRYPTOGRAMERRORRESPONSE | CARDBRANDNOTSUPPORTEDERROR | COMPLIANCEVIOLATIONERROR | DOMESTICTRANSACTIONREQUIREDERRORRESPONSE | DUPLICATEINVOICEIDERRORRESPONSE | INSTRUMENTDECLINEDERROR | ORDERNOTAPPROVEDERROR | MAXPAYMENTATTEMPTSEXCEEDEDERRORRESPONSE | PAYEEBLOCKEDTRANSACTIONERRORRESPONSE | PAYEEFXRATEIDEXPIREDERRORRESPONSE | PAYERACCOUNTLOCKEDORCLOSEDERRORRESPONSE | PAYERACCOUNTRESTRICTEDERRORRESPONSE | PAYERCANNOTPAYERRORRESPONSE | PAYPALTRANSACTIONIDEXPIREDERROR | PNREFEXPIREDERROR | REFERENCEDCARDEXPIREDERROR | TOKENIDNOTFOUNDERROR | TRANSACTIONLIMITEXCEEDEDERRORRESPONSE | TRANSACTIONRECEIVELIMITEXCEEDEDERRORRESPONSE | TRANSACTIONREFUSEDERRORRESPONSE | REDIRECTPAYERFORALTERNATEFUNDING | ORDERALREADYCAPTUREDERROR | TRANSACTIONBLOCKEDBYPAYEEERROR | AUTHCAPTURENOTENABLEDERRORRESPONSE | NOTENABLEDFORBANKPROCESSING | NOTENABLEDFORCARDPROCESSING | PAYEENOTENABLEDFORBANKPROCESSING | PAYEENOTENABLEDFORCARDPROCESSING | INVALIDPICKUPADDRESSERROR | SHIPPINGADDRESSINVALIDERRORRESPONSE | PAYMENTSOURCENOTSUPPORTED | ORDERCOMPLETIONINPROGRESS | BILLINGAGREEMENTIDMISMATCHERROR | PREFERREDPAYMENTSOURCEMISMATCHERROR | INCOMPATIBLEPARAMETERVALUEERRORRESPONSE | INVALIDPREVTRANSREFERRORRESPONSE | CHARGEBACKONPREVIOUSTRANSREFERRORRESPONSE | VOIDEDPREVTRANSREFERRORRESPONSE | PAYMENTSOURCEMISMATCHERRORRESPONSE | MERCHANTINITIATEDSECURITYCODEERRORRESPONSE | MERCHANTINITIATEDAUTHRESULTSERRORRESPONSE | MERCHANTINITIATEDMULTIPURCHASEUNITSERRORRESP | RETURNURLREQUIREDERRORRESPONSE | CANCELURLREQUIREDERRORRESPONSE | SETUPERRORFORBANKERROR | BANKNOTSUPPORTEDFORVERIFICATIONERROR | PAYERACTIONREQUIREDERROR | APPLEPAYAMOUNTMISMATCHERRORRESPONSE | CURRENCYNOTSUPPORTEDFORBANKERROR | ONLYONEBANKSOURCEALLOWEDERROR | INVALIDIBANERROR | IBANCOUNTRYNOTSUPPORTEDERROR | CARDNUMBERREQUIREDERRORRESPONSE | CARDEXPIRYREQUIREDERRORRESPONSE | VAULTINSTRUCTIONREQUIREDERRORRESPONSE | VAULTIDPAYMENTSOURCEMISMATCHERRORRESPONSE | NOTELIGIBLEFORPNREFPROCESSINGERRORRESPONSE | PAYPALIDPROCESSINGINELIGIBILITYERRORRESPONSE | PAYPALTRANSACTIONIDNOTFOUNDERRORRESPONSE | PNREFNOTFOUNDERRORRESPONSE | INVALIDSECURITYCODELENGTHERRORRESPONSE | PLATFORMFEEPAYEECANNOTBESAMEASPAYER | MISSINGPARAMCIPERRORRESP | IDENTIFIERNOTFOUND;

export const ordersCapture422IssuesItemsSchema: Schema<OrdersCapture422IssuesItems> = anyOf(
  [
    aGREEMENTALREADYCANCELLEDRESULTSchema,
    bILLINGAGREEMENTNOTFOUNDRESULTSchema,
    dECLINEDDUETORELATEDTXNERRORSchema,
    mISSINGPREVIOUSREFERENCEERRORRESPONSESchema,
    mISSINGCRYPTOGRAMERRORRESPONSESchema,
    cARDBRANDNOTSUPPORTEDERRORSchema,
    cOMPLIANCEVIOLATIONERRORSchema,
    dOMESTICTRANSACTIONREQUIREDERRORRESPONSESchema,
    dUPLICATEINVOICEIDERRORRESPONSESchema,
    iNSTRUMENTDECLINEDERRORSchema,
    oRDERNOTAPPROVEDERRORSchema,
    mAXPAYMENTATTEMPTSEXCEEDEDERRORRESPONSESchema,
    pAYEEBLOCKEDTRANSACTIONERRORRESPONSESchema,
    pAYEEFXRATEIDEXPIREDERRORRESPONSESchema,
    pAYERACCOUNTLOCKEDORCLOSEDERRORRESPONSESchema,
    pAYERACCOUNTRESTRICTEDERRORRESPONSESchema,
    pAYERCANNOTPAYERRORRESPONSESchema,
    pAYPALTRANSACTIONIDEXPIREDERRORSchema,
    pNREFEXPIREDERRORSchema,
    rEFERENCEDCARDEXPIREDERRORSchema,
    tOKENIDNOTFOUNDERRORSchema,
    tRANSACTIONLIMITEXCEEDEDERRORRESPONSESchema,
    tRANSACTIONRECEIVELIMITEXCEEDEDERRORRESPONSESchema,
    tRANSACTIONREFUSEDERRORRESPONSESchema,
    rEDIRECTPAYERFORALTERNATEFUNDINGSchema,
    oRDERALREADYCAPTUREDERRORSchema,
    tRANSACTIONBLOCKEDBYPAYEEERRORSchema,
    aUTHCAPTURENOTENABLEDERRORRESPONSESchema,
    nOTENABLEDFORBANKPROCESSINGSchema,
    nOTENABLEDFORCARDPROCESSINGSchema,
    pAYEENOTENABLEDFORBANKPROCESSINGSchema,
    pAYEENOTENABLEDFORCARDPROCESSINGSchema,
    iNVALIDPICKUPADDRESSERRORSchema,
    sHIPPINGADDRESSINVALIDERRORRESPONSESchema,
    pAYMENTSOURCENOTSUPPORTEDSchema,
    oRDERCOMPLETIONINPROGRESSSchema,
    bILLINGAGREEMENTIDMISMATCHERRORSchema,
    pREFERREDPAYMENTSOURCEMISMATCHERRORSchema,
    iNCOMPATIBLEPARAMETERVALUEERRORRESPONSESchema,
    iNVALIDPREVTRANSREFERRORRESPONSESchema,
    cHARGEBACKONPREVIOUSTRANSREFERRORRESPONSESchema,
    vOIDEDPREVTRANSREFERRORRESPONSESchema,
    pAYMENTSOURCEMISMATCHERRORRESPONSESchema,
    mERCHANTINITIATEDSECURITYCODEERRORRESPONSESchema,
    mERCHANTINITIATEDAUTHRESULTSERRORRESPONSESchema,
    mERCHANTINITIATEDMULTIPURCHASEUNITSERRORRESPSchema,
    rETURNURLREQUIREDERRORRESPONSESchema,
    cANCELURLREQUIREDERRORRESPONSESchema,
    sETUPERRORFORBANKERRORSchema,
    bANKNOTSUPPORTEDFORVERIFICATIONERRORSchema,
    pAYERACTIONREQUIREDERRORSchema,
    aPPLEPAYAMOUNTMISMATCHERRORRESPONSESchema,
    cURRENCYNOTSUPPORTEDFORBANKERRORSchema,
    oNLYONEBANKSOURCEALLOWEDERRORSchema,
    iNVALIDIBANERRORSchema,
    iBANCOUNTRYNOTSUPPORTEDERRORSchema,
    cARDNUMBERREQUIREDERRORRESPONSESchema,
    cARDEXPIRYREQUIREDERRORRESPONSESchema,
    vAULTINSTRUCTIONREQUIREDERRORRESPONSESchema,
    vAULTIDPAYMENTSOURCEMISMATCHERRORRESPONSESchema,
    nOTELIGIBLEFORPNREFPROCESSINGERRORRESPONSESchema,
    pAYPALIDPROCESSINGINELIGIBILITYERRORRESPONSESchema,
    pAYPALTRANSACTIONIDNOTFOUNDERRORRESPONSESchema,
    pNREFNOTFOUNDERRORRESPONSESchema,
    iNVALIDSECURITYCODELENGTHERRORRESPONSESchema,
    pLATFORMFEEPAYEECANNOTBESAMEASPAYERSchema,
    mISSINGPARAMCIPERRORRESPSchema,
    iDENTIFIERNOTFOUNDSchema,
  ]
);

export namespace OrdersCapture422IssuesItems {
  /**
  * Validation method to narrow down union type to AGREEMENTALREADYCANCELLEDRESULT type case.
  *
  * This is AGREEMENT_ALREADY_CANCELLED_RESULT case.
  */
  export function isAGREEMENTALREADYCANCELLEDRESULT(value: unknown): value is AGREEMENTALREADYCANCELLEDRESULT {
    const validationResult = validateAndMap(value, aGREEMENTALREADYCANCELLEDRESULTSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to BILLINGAGREEMENTNOTFOUNDRESULT type case.
  *
  * This is BILLING_AGREEMENT_NOT_FOUND_RESULT case.
  */
  export function isBILLINGAGREEMENTNOTFOUNDRESULT(value: unknown): value is BILLINGAGREEMENTNOTFOUNDRESULT {
    const validationResult = validateAndMap(value, bILLINGAGREEMENTNOTFOUNDRESULTSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DECLINEDDUETORELATEDTXNERROR type case.
  *
  * This is DECLINED_DUE_TO_RELATED_TXN_ERROR case.
  */
  export function isDECLINEDDUETORELATEDTXNERROR(value: unknown): value is DECLINEDDUETORELATEDTXNERROR {
    const validationResult = validateAndMap(value, dECLINEDDUETORELATEDTXNERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISSINGPREVIOUSREFERENCEERRORRESPONSE type case.
  *
  * This is MISSING_PREVIOUS_REFERENCE_ERROR_RESPONSE case.
  */
  export function isMISSINGPREVIOUSREFERENCEERRORRESPONSE(value: unknown): value is MISSINGPREVIOUSREFERENCEERRORRESPONSE {
    const validationResult = validateAndMap(value, mISSINGPREVIOUSREFERENCEERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISSINGCRYPTOGRAMERRORRESPONSE type case.
  *
  * This is MISSING_CRYPTOGRAM_ERROR_RESPONSE case.
  */
  export function isMISSINGCRYPTOGRAMERRORRESPONSE(value: unknown): value is MISSINGCRYPTOGRAMERRORRESPONSE {
    const validationResult = validateAndMap(value, mISSINGCRYPTOGRAMERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CARDBRANDNOTSUPPORTEDERROR type case.
  *
  * This is CARD_BRAND_NOT_SUPPORTED_ERROR case.
  */
  export function isCARDBRANDNOTSUPPORTEDERROR(value: unknown): value is CARDBRANDNOTSUPPORTEDERROR {
    const validationResult = validateAndMap(value, cARDBRANDNOTSUPPORTEDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to COMPLIANCEVIOLATIONERROR type case.
  *
  * This is COMPLIANCE_VIOLATION_ERROR case.
  */
  export function isCOMPLIANCEVIOLATIONERROR(value: unknown): value is COMPLIANCEVIOLATIONERROR {
    const validationResult = validateAndMap(value, cOMPLIANCEVIOLATIONERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DOMESTICTRANSACTIONREQUIREDERRORRESPONSE type case.
  *
  * This is DOMESTIC_TRANSACTION_REQUIRED_ERROR_RESPONSE case.
  */
  export function isDOMESTICTRANSACTIONREQUIREDERRORRESPONSE(value: unknown): value is DOMESTICTRANSACTIONREQUIREDERRORRESPONSE {
    const validationResult = validateAndMap(value, dOMESTICTRANSACTIONREQUIREDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DUPLICATEINVOICEIDERRORRESPONSE type case.
  *
  * This is DUPLICATE_INVOICE_ID_ERROR_RESPONSE case.
  */
  export function isDUPLICATEINVOICEIDERRORRESPONSE(value: unknown): value is DUPLICATEINVOICEIDERRORRESPONSE {
    const validationResult = validateAndMap(value, dUPLICATEINVOICEIDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INSTRUMENTDECLINEDERROR type case.
  *
  * This is INSTRUMENT_DECLINED_ERROR case.
  */
  export function isINSTRUMENTDECLINEDERROR(value: unknown): value is INSTRUMENTDECLINEDERROR {
    const validationResult = validateAndMap(value, iNSTRUMENTDECLINEDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ORDERNOTAPPROVEDERROR type case.
  *
  * This is ORDER_NOT_APPROVED_ERROR case.
  */
  export function isORDERNOTAPPROVEDERROR(value: unknown): value is ORDERNOTAPPROVEDERROR {
    const validationResult = validateAndMap(value, oRDERNOTAPPROVEDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MAXPAYMENTATTEMPTSEXCEEDEDERRORRESPONSE type case.
  *
  * This is MAX_PAYMENT_ATTEMPTS_EXCEEDED_ERROR_RESPONSE case.
  */
  export function isMAXPAYMENTATTEMPTSEXCEEDEDERRORRESPONSE(value: unknown): value is MAXPAYMENTATTEMPTSEXCEEDEDERRORRESPONSE {
    const validationResult = validateAndMap(value, mAXPAYMENTATTEMPTSEXCEEDEDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEEBLOCKEDTRANSACTIONERRORRESPONSE type case.
  *
  * This is PAYEE_BLOCKED_TRANSACTION_ERROR_RESPONSE case.
  */
  export function isPAYEEBLOCKEDTRANSACTIONERRORRESPONSE(value: unknown): value is PAYEEBLOCKEDTRANSACTIONERRORRESPONSE {
    const validationResult = validateAndMap(value, pAYEEBLOCKEDTRANSACTIONERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEEFXRATEIDEXPIREDERRORRESPONSE type case.
  *
  * This is PAYEE_FX_RATE_ID_EXPIRED_ERROR_RESPONSE case.
  */
  export function isPAYEEFXRATEIDEXPIREDERRORRESPONSE(value: unknown): value is PAYEEFXRATEIDEXPIREDERRORRESPONSE {
    const validationResult = validateAndMap(value, pAYEEFXRATEIDEXPIREDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYERACCOUNTLOCKEDORCLOSEDERRORRESPONSE type case.
  *
  * This is PAYER_ACCOUNT_LOCKED_OR_CLOSED_ERROR_RESPONSE case.
  */
  export function isPAYERACCOUNTLOCKEDORCLOSEDERRORRESPONSE(value: unknown): value is PAYERACCOUNTLOCKEDORCLOSEDERRORRESPONSE {
    const validationResult = validateAndMap(value, pAYERACCOUNTLOCKEDORCLOSEDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYERACCOUNTRESTRICTEDERRORRESPONSE type case.
  *
  * This is PAYER_ACCOUNT_RESTRICTED_ERROR_RESPONSE case.
  */
  export function isPAYERACCOUNTRESTRICTEDERRORRESPONSE(value: unknown): value is PAYERACCOUNTRESTRICTEDERRORRESPONSE {
    const validationResult = validateAndMap(value, pAYERACCOUNTRESTRICTEDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYERCANNOTPAYERRORRESPONSE type case.
  *
  * This is PAYER_CANNOT_PAY_ERROR_RESPONSE case.
  */
  export function isPAYERCANNOTPAYERRORRESPONSE(value: unknown): value is PAYERCANNOTPAYERRORRESPONSE {
    const validationResult = validateAndMap(value, pAYERCANNOTPAYERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYPALTRANSACTIONIDEXPIREDERROR type case.
  *
  * This is PAYPAL_TRANSACTION_ID_EXPIRED_ERROR case.
  */
  export function isPAYPALTRANSACTIONIDEXPIREDERROR(value: unknown): value is PAYPALTRANSACTIONIDEXPIREDERROR {
    const validationResult = validateAndMap(value, pAYPALTRANSACTIONIDEXPIREDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PNREFEXPIREDERROR type case.
  *
  * This is PNREF_EXPIRED_ERROR case.
  */
  export function isPNREFEXPIREDERROR(value: unknown): value is PNREFEXPIREDERROR {
    const validationResult = validateAndMap(value, pNREFEXPIREDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REFERENCEDCARDEXPIREDERROR type case.
  *
  * This is REFERENCED_CARD_EXPIRED_ERROR case.
  */
  export function isREFERENCEDCARDEXPIREDERROR(value: unknown): value is REFERENCEDCARDEXPIREDERROR {
    const validationResult = validateAndMap(value, rEFERENCEDCARDEXPIREDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TOKENIDNOTFOUNDERROR type case.
  *
  * This is TOKEN_ID_NOT_FOUND_ERROR case.
  */
  export function isTOKENIDNOTFOUNDERROR(value: unknown): value is TOKENIDNOTFOUNDERROR {
    const validationResult = validateAndMap(value, tOKENIDNOTFOUNDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TRANSACTIONLIMITEXCEEDEDERRORRESPONSE type case.
  *
  * This is TRANSACTION_LIMIT_EXCEEDED_ERROR_RESPONSE case.
  */
  export function isTRANSACTIONLIMITEXCEEDEDERRORRESPONSE(value: unknown): value is TRANSACTIONLIMITEXCEEDEDERRORRESPONSE {
    const validationResult = validateAndMap(value, tRANSACTIONLIMITEXCEEDEDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TRANSACTIONRECEIVELIMITEXCEEDEDERRORRESPONSE type case.
  *
  * This is TRANSACTION_RECEIVE_LIMIT_EXCEEDED_ERROR_RESPONSE case.
  */
  export function isTRANSACTIONRECEIVELIMITEXCEEDEDERRORRESPONSE(value: unknown): value is TRANSACTIONRECEIVELIMITEXCEEDEDERRORRESPONSE {
    const validationResult = validateAndMap(value, tRANSACTIONRECEIVELIMITEXCEEDEDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TRANSACTIONREFUSEDERRORRESPONSE type case.
  *
  * This is TRANSACTION_REFUSED_ERROR_RESPONSE case.
  */
  export function isTRANSACTIONREFUSEDERRORRESPONSE(value: unknown): value is TRANSACTIONREFUSEDERRORRESPONSE {
    const validationResult = validateAndMap(value, tRANSACTIONREFUSEDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REDIRECTPAYERFORALTERNATEFUNDING type case.
  *
  * This is REDIRECT_PAYER_FOR_ALTERNATE_FUNDING case.
  */
  export function isREDIRECTPAYERFORALTERNATEFUNDING(value: unknown): value is REDIRECTPAYERFORALTERNATEFUNDING {
    const validationResult = validateAndMap(value, rEDIRECTPAYERFORALTERNATEFUNDINGSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ORDERALREADYCAPTUREDERROR type case.
  *
  * This is ORDER_ALREADY_CAPTURED_ERROR case.
  */
  export function isORDERALREADYCAPTUREDERROR(value: unknown): value is ORDERALREADYCAPTUREDERROR {
    const validationResult = validateAndMap(value, oRDERALREADYCAPTUREDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TRANSACTIONBLOCKEDBYPAYEEERROR type case.
  *
  * This is TRANSACTION_BLOCKED_BY_PAYEE_ERROR case.
  */
  export function isTRANSACTIONBLOCKEDBYPAYEEERROR(value: unknown): value is TRANSACTIONBLOCKEDBYPAYEEERROR {
    const validationResult = validateAndMap(value, tRANSACTIONBLOCKEDBYPAYEEERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to AUTHCAPTURENOTENABLEDERRORRESPONSE type case.
  *
  * This is AUTH_CAPTURE_NOT_ENABLED_ERROR_RESPONSE case.
  */
  export function isAUTHCAPTURENOTENABLEDERRORRESPONSE(value: unknown): value is AUTHCAPTURENOTENABLEDERRORRESPONSE {
    const validationResult = validateAndMap(value, aUTHCAPTURENOTENABLEDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTENABLEDFORBANKPROCESSING type case.
  *
  * This is NOT_ENABLED_FOR_BANK_PROCESSING case.
  */
  export function isNOTENABLEDFORBANKPROCESSING(value: unknown): value is NOTENABLEDFORBANKPROCESSING {
    const validationResult = validateAndMap(value, nOTENABLEDFORBANKPROCESSINGSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTENABLEDFORCARDPROCESSING type case.
  *
  * This is NOT_ENABLED_FOR_CARD_PROCESSING case.
  */
  export function isNOTENABLEDFORCARDPROCESSING(value: unknown): value is NOTENABLEDFORCARDPROCESSING {
    const validationResult = validateAndMap(value, nOTENABLEDFORCARDPROCESSINGSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEENOTENABLEDFORBANKPROCESSING type case.
  *
  * This is PAYEE_NOT_ENABLED_FOR_BANK_PROCESSING case.
  */
  export function isPAYEENOTENABLEDFORBANKPROCESSING(value: unknown): value is PAYEENOTENABLEDFORBANKPROCESSING {
    const validationResult = validateAndMap(value, pAYEENOTENABLEDFORBANKPROCESSINGSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEENOTENABLEDFORCARDPROCESSING type case.
  *
  * This is PAYEE_NOT_ENABLED_FOR_CARD_PROCESSING case.
  */
  export function isPAYEENOTENABLEDFORCARDPROCESSING(value: unknown): value is PAYEENOTENABLEDFORCARDPROCESSING {
    const validationResult = validateAndMap(value, pAYEENOTENABLEDFORCARDPROCESSINGSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDPICKUPADDRESSERROR type case.
  *
  * This is INVALID_PICKUP_ADDRESS_ERROR case.
  */
  export function isINVALIDPICKUPADDRESSERROR(value: unknown): value is INVALIDPICKUPADDRESSERROR {
    const validationResult = validateAndMap(value, iNVALIDPICKUPADDRESSERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SHIPPINGADDRESSINVALIDERRORRESPONSE type case.
  *
  * This is SHIPPING_ADDRESS_INVALID_ERROR_RESPONSE case.
  */
  export function isSHIPPINGADDRESSINVALIDERRORRESPONSE(value: unknown): value is SHIPPINGADDRESSINVALIDERRORRESPONSE {
    const validationResult = validateAndMap(value, sHIPPINGADDRESSINVALIDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYMENTSOURCENOTSUPPORTED type case.
  *
  * This is PAYMENT_SOURCE_NOT_SUPPORTED case.
  */
  export function isPAYMENTSOURCENOTSUPPORTED(value: unknown): value is PAYMENTSOURCENOTSUPPORTED {
    const validationResult = validateAndMap(value, pAYMENTSOURCENOTSUPPORTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ORDERCOMPLETIONINPROGRESS type case.
  *
  * This is ORDER_COMPLETION_IN_PROGRESS case.
  */
  export function isORDERCOMPLETIONINPROGRESS(value: unknown): value is ORDERCOMPLETIONINPROGRESS {
    const validationResult = validateAndMap(value, oRDERCOMPLETIONINPROGRESSSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to BILLINGAGREEMENTIDMISMATCHERROR type case.
  *
  * This is BILLING_AGREEMENT_ID_MISMATCH_ERROR case.
  */
  export function isBILLINGAGREEMENTIDMISMATCHERROR(value: unknown): value is BILLINGAGREEMENTIDMISMATCHERROR {
    const validationResult = validateAndMap(value, bILLINGAGREEMENTIDMISMATCHERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PREFERREDPAYMENTSOURCEMISMATCHERROR type case.
  *
  * This is PREFERRED_PAYMENT_SOURCE_MISMATCH_ERROR case.
  */
  export function isPREFERREDPAYMENTSOURCEMISMATCHERROR(value: unknown): value is PREFERREDPAYMENTSOURCEMISMATCHERROR {
    const validationResult = validateAndMap(value, pREFERREDPAYMENTSOURCEMISMATCHERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INCOMPATIBLEPARAMETERVALUEERRORRESPONSE type case.
  *
  * This is INCOMPATIBLE_PARAMETER_VALUE_ERROR_RESPONSE case.
  */
  export function isINCOMPATIBLEPARAMETERVALUEERRORRESPONSE(value: unknown): value is INCOMPATIBLEPARAMETERVALUEERRORRESPONSE {
    const validationResult = validateAndMap(value, iNCOMPATIBLEPARAMETERVALUEERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDPREVTRANSREFERRORRESPONSE type case.
  *
  * This is INVALID_PREV_TRANS_REF_ERROR_RESPONSE case.
  */
  export function isINVALIDPREVTRANSREFERRORRESPONSE(value: unknown): value is INVALIDPREVTRANSREFERRORRESPONSE {
    const validationResult = validateAndMap(value, iNVALIDPREVTRANSREFERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CHARGEBACKONPREVIOUSTRANSREFERRORRESPONSE type case.
  *
  * This is CHARGEBACK_ON_PREVIOUS_TRANS_REF_ERROR_RESPONSE case.
  */
  export function isCHARGEBACKONPREVIOUSTRANSREFERRORRESPONSE(value: unknown): value is CHARGEBACKONPREVIOUSTRANSREFERRORRESPONSE {
    const validationResult = validateAndMap(value, cHARGEBACKONPREVIOUSTRANSREFERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to VOIDEDPREVTRANSREFERRORRESPONSE type case.
  *
  * This is VOIDED_PREV_TRANS_REF_ERROR_RESPONSE case.
  */
  export function isVOIDEDPREVTRANSREFERRORRESPONSE(value: unknown): value is VOIDEDPREVTRANSREFERRORRESPONSE {
    const validationResult = validateAndMap(value, vOIDEDPREVTRANSREFERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYMENTSOURCEMISMATCHERRORRESPONSE type case.
  *
  * This is PAYMENT_SOURCE_MISMATCH_ERROR_RESPONSE case.
  */
  export function isPAYMENTSOURCEMISMATCHERRORRESPONSE(value: unknown): value is PAYMENTSOURCEMISMATCHERRORRESPONSE {
    const validationResult = validateAndMap(value, pAYMENTSOURCEMISMATCHERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MERCHANTINITIATEDSECURITYCODEERRORRESPONSE type case.
  *
  * This is MERCHANT_INITIATED_SECURITY_CODE_ERROR_RESPONSE case.
  */
  export function isMERCHANTINITIATEDSECURITYCODEERRORRESPONSE(value: unknown): value is MERCHANTINITIATEDSECURITYCODEERRORRESPONSE {
    const validationResult = validateAndMap(value, mERCHANTINITIATEDSECURITYCODEERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MERCHANTINITIATEDAUTHRESULTSERRORRESPONSE type case.
  *
  * This is MERCHANT_INITIATED_AUTH_RESULTS_ERROR_RESPONSE case.
  */
  export function isMERCHANTINITIATEDAUTHRESULTSERRORRESPONSE(value: unknown): value is MERCHANTINITIATEDAUTHRESULTSERRORRESPONSE {
    const validationResult = validateAndMap(value, mERCHANTINITIATEDAUTHRESULTSERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MERCHANTINITIATEDMULTIPURCHASEUNITSERRORRESP type case.
  *
  * This is MERCHANT_INITIATED_MULTI_PURCHASE_UNITS_ERROR_RESP case.
  */
  export function isMERCHANTINITIATEDMULTIPURCHASEUNITSERRORRESP(value: unknown): value is MERCHANTINITIATEDMULTIPURCHASEUNITSERRORRESP {
    const validationResult = validateAndMap(value, mERCHANTINITIATEDMULTIPURCHASEUNITSERRORRESPSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to RETURNURLREQUIREDERRORRESPONSE type case.
  *
  * This is RETURN_URL_REQUIRED_ERROR_RESPONSE case.
  */
  export function isRETURNURLREQUIREDERRORRESPONSE(value: unknown): value is RETURNURLREQUIREDERRORRESPONSE {
    const validationResult = validateAndMap(value, rETURNURLREQUIREDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CANCELURLREQUIREDERRORRESPONSE type case.
  *
  * This is CANCEL_URL_REQUIRED_ERROR_RESPONSE case.
  */
  export function isCANCELURLREQUIREDERRORRESPONSE(value: unknown): value is CANCELURLREQUIREDERRORRESPONSE {
    const validationResult = validateAndMap(value, cANCELURLREQUIREDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SETUPERRORFORBANKERROR type case.
  *
  * This is SETUP_ERROR_FOR_BANK_ERROR case.
  */
  export function isSETUPERRORFORBANKERROR(value: unknown): value is SETUPERRORFORBANKERROR {
    const validationResult = validateAndMap(value, sETUPERRORFORBANKERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to BANKNOTSUPPORTEDFORVERIFICATIONERROR type case.
  *
  * This is BANK_NOT_SUPPORTED_FOR_VERIFICATION_ERROR case.
  */
  export function isBANKNOTSUPPORTEDFORVERIFICATIONERROR(value: unknown): value is BANKNOTSUPPORTEDFORVERIFICATIONERROR {
    const validationResult = validateAndMap(value, bANKNOTSUPPORTEDFORVERIFICATIONERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYERACTIONREQUIREDERROR type case.
  *
  * This is PAYER_ACTION_REQUIRED_ERROR case.
  */
  export function isPAYERACTIONREQUIREDERROR(value: unknown): value is PAYERACTIONREQUIREDERROR {
    const validationResult = validateAndMap(value, pAYERACTIONREQUIREDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to APPLEPAYAMOUNTMISMATCHERRORRESPONSE type case.
  *
  * This is APPLE_PAY_AMOUNT_MISMATCH_ERROR_RESPONSE case.
  */
  export function isAPPLEPAYAMOUNTMISMATCHERRORRESPONSE(value: unknown): value is APPLEPAYAMOUNTMISMATCHERRORRESPONSE {
    const validationResult = validateAndMap(value, aPPLEPAYAMOUNTMISMATCHERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CURRENCYNOTSUPPORTEDFORBANKERROR type case.
  *
  * This is CURRENCY_NOT_SUPPORTED_FOR_BANK_ERROR case.
  */
  export function isCURRENCYNOTSUPPORTEDFORBANKERROR(value: unknown): value is CURRENCYNOTSUPPORTEDFORBANKERROR {
    const validationResult = validateAndMap(value, cURRENCYNOTSUPPORTEDFORBANKERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ONLYONEBANKSOURCEALLOWEDERROR type case.
  *
  * This is ONLY_ONE_BANK_SOURCE_ALLOWED_ERROR case.
  */
  export function isONLYONEBANKSOURCEALLOWEDERROR(value: unknown): value is ONLYONEBANKSOURCEALLOWEDERROR {
    const validationResult = validateAndMap(value, oNLYONEBANKSOURCEALLOWEDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDIBANERROR type case.
  *
  * This is INVALID_IBAN_ERROR case.
  */
  export function isINVALIDIBANERROR(value: unknown): value is INVALIDIBANERROR {
    const validationResult = validateAndMap(value, iNVALIDIBANERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to IBANCOUNTRYNOTSUPPORTEDERROR type case.
  *
  * This is IBAN_COUNTRY_NOT_SUPPORTED_ERROR case.
  */
  export function isIBANCOUNTRYNOTSUPPORTEDERROR(value: unknown): value is IBANCOUNTRYNOTSUPPORTEDERROR {
    const validationResult = validateAndMap(value, iBANCOUNTRYNOTSUPPORTEDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CARDNUMBERREQUIREDERRORRESPONSE type case.
  *
  * This is CARD_NUMBER_REQUIRED_ERROR_RESPONSE case.
  */
  export function isCARDNUMBERREQUIREDERRORRESPONSE(value: unknown): value is CARDNUMBERREQUIREDERRORRESPONSE {
    const validationResult = validateAndMap(value, cARDNUMBERREQUIREDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CARDEXPIRYREQUIREDERRORRESPONSE type case.
  *
  * This is CARD_EXPIRY_REQUIRED_ERROR_RESPONSE case.
  */
  export function isCARDEXPIRYREQUIREDERRORRESPONSE(value: unknown): value is CARDEXPIRYREQUIREDERRORRESPONSE {
    const validationResult = validateAndMap(value, cARDEXPIRYREQUIREDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to VAULTINSTRUCTIONREQUIREDERRORRESPONSE type case.
  *
  * This is VAULT_INSTRUCTION_REQUIRED_ERROR_RESPONSE case.
  */
  export function isVAULTINSTRUCTIONREQUIREDERRORRESPONSE(value: unknown): value is VAULTINSTRUCTIONREQUIREDERRORRESPONSE {
    const validationResult = validateAndMap(value, vAULTINSTRUCTIONREQUIREDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to VAULTIDPAYMENTSOURCEMISMATCHERRORRESPONSE type case.
  *
  * This is VAULT_ID_PAYMENT_SOURCE_MISMATCH_ERROR_RESPONSE case.
  */
  export function isVAULTIDPAYMENTSOURCEMISMATCHERRORRESPONSE(value: unknown): value is VAULTIDPAYMENTSOURCEMISMATCHERRORRESPONSE {
    const validationResult = validateAndMap(value, vAULTIDPAYMENTSOURCEMISMATCHERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTELIGIBLEFORPNREFPROCESSINGERRORRESPONSE type case.
  *
  * This is NOT_ELIGIBLE_FOR_PNREF_PROCESSING_ERROR_RESPONSE case.
  */
  export function isNOTELIGIBLEFORPNREFPROCESSINGERRORRESPONSE(value: unknown): value is NOTELIGIBLEFORPNREFPROCESSINGERRORRESPONSE {
    const validationResult = validateAndMap(value, nOTELIGIBLEFORPNREFPROCESSINGERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYPALIDPROCESSINGINELIGIBILITYERRORRESPONSE type case.
  *
  * This is PAYPAL_ID_PROCESSING_INELIGIBILITY_ERROR_RESPONSE case.
  */
  export function isPAYPALIDPROCESSINGINELIGIBILITYERRORRESPONSE(value: unknown): value is PAYPALIDPROCESSINGINELIGIBILITYERRORRESPONSE {
    const validationResult = validateAndMap(value, pAYPALIDPROCESSINGINELIGIBILITYERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYPALTRANSACTIONIDNOTFOUNDERRORRESPONSE type case.
  *
  * This is PAYPAL_TRANSACTION_ID_NOT_FOUND_ERROR_RESPONSE case.
  */
  export function isPAYPALTRANSACTIONIDNOTFOUNDERRORRESPONSE(value: unknown): value is PAYPALTRANSACTIONIDNOTFOUNDERRORRESPONSE {
    const validationResult = validateAndMap(value, pAYPALTRANSACTIONIDNOTFOUNDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PNREFNOTFOUNDERRORRESPONSE type case.
  *
  * This is PNREF_NOT_FOUND_ERROR_RESPONSE case.
  */
  export function isPNREFNOTFOUNDERRORRESPONSE(value: unknown): value is PNREFNOTFOUNDERRORRESPONSE {
    const validationResult = validateAndMap(value, pNREFNOTFOUNDERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDSECURITYCODELENGTHERRORRESPONSE type case.
  *
  * This is INVALID_SECURITY_CODE_LENGTH_ERROR_RESPONSE case.
  */
  export function isINVALIDSECURITYCODELENGTHERRORRESPONSE(value: unknown): value is INVALIDSECURITYCODELENGTHERRORRESPONSE {
    const validationResult = validateAndMap(value, iNVALIDSECURITYCODELENGTHERRORRESPONSESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PLATFORMFEEPAYEECANNOTBESAMEASPAYER type case.
  *
  * This is PLATFORM_FEE_PAYEE_CANNOT_BE_SAME_AS_PAYER case.
  */
  export function isPLATFORMFEEPAYEECANNOTBESAMEASPAYER(value: unknown): value is PLATFORMFEEPAYEECANNOTBESAMEASPAYER {
    const validationResult = validateAndMap(value, pLATFORMFEEPAYEECANNOTBESAMEASPAYERSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISSINGPARAMCIPERRORRESP type case.
  *
  * This is MISSING_PARAM_CIP_ERROR_RESP case.
  */
  export function isMISSINGPARAMCIPERRORRESP(value: unknown): value is MISSINGPARAMCIPERRORRESP {
    const validationResult = validateAndMap(value, mISSINGPARAMCIPERRORRESPSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to IDENTIFIERNOTFOUND type case.
  *
  * This is IDENTIFIER_NOT_FOUND case.
  */
  export function isIDENTIFIERNOTFOUND(value: unknown): value is IDENTIFIERNOTFOUND {
    const validationResult = validateAndMap(value, iDENTIFIERNOTFOUNDSchema);
    return validationResult.errors === false;
  }
}
