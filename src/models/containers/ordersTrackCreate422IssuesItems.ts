/**
 * Paypal Merged APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import {
  CAPTUREIDNOTFOUND,
  cAPTUREIDNOTFOUNDSchema,
} from '../cAPTUREIDNOTFOUND';
import {
  CAPTURESTATUSNOTVALID,
  cAPTURESTATUSNOTVALIDSchema,
} from '../cAPTURESTATUSNOTVALID';
import { ITEMSKUMISMATCH, iTEMSKUMISMATCHSchema } from '../iTEMSKUMISMATCH';
import { MSPNOTSUPPORTED, mSPNOTSUPPORTEDSchema } from '../mSPNOTSUPPORTED';

/** This is a container type for any-of types. */
export type OrdersTrackCreate422IssuesItems = CAPTURESTATUSNOTVALID | ITEMSKUMISMATCH | CAPTUREIDNOTFOUND | MSPNOTSUPPORTED;

export const ordersTrackCreate422IssuesItemsSchema: Schema<OrdersTrackCreate422IssuesItems> = anyOf(
  [
    cAPTURESTATUSNOTVALIDSchema,
    iTEMSKUMISMATCHSchema,
    cAPTUREIDNOTFOUNDSchema,
    mSPNOTSUPPORTEDSchema,
  ]
);

export namespace OrdersTrackCreate422IssuesItems {
  /**
  * Validation method to narrow down union type to CAPTURESTATUSNOTVALID type case.
  *
  * This is CAPTURE_STATUS_NOT_VALID case.
  */
  export function isCAPTURESTATUSNOTVALID(value: unknown): value is CAPTURESTATUSNOTVALID {
    const validationResult = validateAndMap(value, cAPTURESTATUSNOTVALIDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ITEMSKUMISMATCH type case.
  *
  * This is ITEM_SKU_MISMATCH case.
  */
  export function isITEMSKUMISMATCH(value: unknown): value is ITEMSKUMISMATCH {
    const validationResult = validateAndMap(value, iTEMSKUMISMATCHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CAPTUREIDNOTFOUND type case.
  *
  * This is CAPTURE_ID_NOT_FOUND case.
  */
  export function isCAPTUREIDNOTFOUND(value: unknown): value is CAPTUREIDNOTFOUND {
    const validationResult = validateAndMap(value, cAPTUREIDNOTFOUNDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MSPNOTSUPPORTED type case.
  *
  * This is MSP_NOT_SUPPORTED case.
  */
  export function isMSPNOTSUPPORTED(value: unknown): value is MSPNOTSUPPORTED {
    const validationResult = validateAndMap(value, mSPNOTSUPPORTEDSchema);
    return validationResult.errors === false;
  }
}
