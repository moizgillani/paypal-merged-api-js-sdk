/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import {
  CANNOTBENEGATIVEPayments,
  cANNOTBENEGATIVEPaymentsSchema,
} from '../cANNOTBENEGATIVEPayments';
import {
  CANNOTBEZEROORNEGATIVE,
  cANNOTBEZEROORNEGATIVESchema,
} from '../cANNOTBEZEROORNEGATIVE';
import {
  CAPTUREFULLYREFUNDED,
  cAPTUREFULLYREFUNDEDSchema,
} from '../cAPTUREFULLYREFUNDED';
import { CURRENCYMISMATCH, cURRENCYMISMATCHSchema } from '../cURRENCYMISMATCH';
import { DECIMALPRECISION, dECIMALPRECISIONSchema } from '../dECIMALPRECISION';
import {
  DECIMALSNOTSUPPORTED,
  dECIMALSNOTSUPPORTEDSchema,
} from '../dECIMALSNOTSUPPORTED';
import {
  DUPLICATEINVOICEID,
  dUPLICATEINVOICEIDSchema,
} from '../dUPLICATEINVOICEID';
import {
  INVALIDCURRENCYCODEPayments,
  iNVALIDCURRENCYCODEPaymentsSchema,
} from '../iNVALIDCURRENCYCODEPayments';
import {
  MAXNUMBEROFREFUNDSEXCEEDED,
  mAXNUMBEROFREFUNDSEXCEEDEDSchema,
} from '../mAXNUMBEROFREFUNDSEXCEEDED';
import {
  PARTIALREFUNDNOTALLOWED,
  pARTIALREFUNDNOTALLOWEDSchema,
} from '../pARTIALREFUNDNOTALLOWED';
import {
  PAYEEACCOUNTLOCKEDORCLOSED,
  pAYEEACCOUNTLOCKEDORCLOSEDSchema,
} from '../pAYEEACCOUNTLOCKEDORCLOSED';
import {
  PAYEEACCOUNTRESTRICTED,
  pAYEEACCOUNTRESTRICTEDSchema,
} from '../pAYEEACCOUNTRESTRICTED';
import {
  PAYERACCOUNTLOCKEDORCLOSED,
  pAYERACCOUNTLOCKEDORCLOSEDSchema,
} from '../pAYERACCOUNTLOCKEDORCLOSED';
import { PENDINGCAPTURE, pENDINGCAPTURESchema } from '../pENDINGCAPTURE';
import {
  PLATFORMFEEEXCEEDED,
  pLATFORMFEEEXCEEDEDSchema,
} from '../pLATFORMFEEEXCEEDED';
import {
  PLATFORMFEENOTENABLED,
  pLATFORMFEENOTENABLEDSchema,
} from '../pLATFORMFEENOTENABLED';
import {
  REFUNDAMOUNTEXCEEDED,
  rEFUNDAMOUNTEXCEEDEDSchema,
} from '../rEFUNDAMOUNTEXCEEDED';
import {
  REFUNDAMOUNTTOOLOW,
  rEFUNDAMOUNTTOOLOWSchema,
} from '../rEFUNDAMOUNTTOOLOW';
import {
  REFUNDCAPTURECURRENCYMISMATCH,
  rEFUNDCAPTURECURRENCYMISMATCHSchema,
} from '../rEFUNDCAPTURECURRENCYMISMATCH';
import {
  REFUNDFAILEDINSUFFICIENTFUNDS,
  rEFUNDFAILEDINSUFFICIENTFUNDSSchema,
} from '../rEFUNDFAILEDINSUFFICIENTFUNDS';
import {
  REFUNDISRESTRICTED,
  rEFUNDISRESTRICTEDSchema,
} from '../rEFUNDISRESTRICTED';
import { REFUNDNOTALLOWED, rEFUNDNOTALLOWEDSchema } from '../rEFUNDNOTALLOWED';
import {
  REFUNDNOTPERMITTEDDUETOCHARGEBACK,
  rEFUNDNOTPERMITTEDDUETOCHARGEBACKSchema,
} from '../rEFUNDNOTPERMITTEDDUETOCHARGEBACK';
import {
  REFUNDTIMELIMITEXCEEDED,
  rEFUNDTIMELIMITEXCEEDEDSchema,
} from '../rEFUNDTIMELIMITEXCEEDED';
import {
  TRANSACTIONDISPUTED,
  tRANSACTIONDISPUTEDSchema,
} from '../tRANSACTIONDISPUTED';

/** This is a container type for any-of types. */
export type Capturesrefund422issuesItems = CANNOTBEZEROORNEGATIVE | DECIMALPRECISION | DECIMALSNOTSUPPORTED | INVALIDCURRENCYCODEPayments | CURRENCYMISMATCH | CANNOTBENEGATIVEPayments | CAPTUREFULLYREFUNDED | REFUNDCAPTURECURRENCYMISMATCH | REFUNDNOTALLOWED | REFUNDTIMELIMITEXCEEDED | REFUNDAMOUNTEXCEEDED | REFUNDAMOUNTTOOLOW | REFUNDFAILEDINSUFFICIENTFUNDS | PARTIALREFUNDNOTALLOWED | MAXNUMBEROFREFUNDSEXCEEDED | PENDINGCAPTURE | DUPLICATEINVOICEID | PAYEEACCOUNTLOCKEDORCLOSED | PAYERACCOUNTLOCKEDORCLOSED | PAYEEACCOUNTRESTRICTED | REFUNDNOTPERMITTEDDUETOCHARGEBACK | TRANSACTIONDISPUTED | PLATFORMFEEEXCEEDED | REFUNDISRESTRICTED | PLATFORMFEENOTENABLED;

export const capturesrefund422issuesItemsSchema: Schema<Capturesrefund422issuesItems> = anyOf(
  [
    cANNOTBEZEROORNEGATIVESchema,
    dECIMALPRECISIONSchema,
    dECIMALSNOTSUPPORTEDSchema,
    iNVALIDCURRENCYCODEPaymentsSchema,
    cURRENCYMISMATCHSchema,
    cANNOTBENEGATIVEPaymentsSchema,
    cAPTUREFULLYREFUNDEDSchema,
    rEFUNDCAPTURECURRENCYMISMATCHSchema,
    rEFUNDNOTALLOWEDSchema,
    rEFUNDTIMELIMITEXCEEDEDSchema,
    rEFUNDAMOUNTEXCEEDEDSchema,
    rEFUNDAMOUNTTOOLOWSchema,
    rEFUNDFAILEDINSUFFICIENTFUNDSSchema,
    pARTIALREFUNDNOTALLOWEDSchema,
    mAXNUMBEROFREFUNDSEXCEEDEDSchema,
    pENDINGCAPTURESchema,
    dUPLICATEINVOICEIDSchema,
    pAYEEACCOUNTLOCKEDORCLOSEDSchema,
    pAYERACCOUNTLOCKEDORCLOSEDSchema,
    pAYEEACCOUNTRESTRICTEDSchema,
    rEFUNDNOTPERMITTEDDUETOCHARGEBACKSchema,
    tRANSACTIONDISPUTEDSchema,
    pLATFORMFEEEXCEEDEDSchema,
    rEFUNDISRESTRICTEDSchema,
    pLATFORMFEENOTENABLEDSchema,
  ]
);

export namespace Capturesrefund422issuesItems {
  /**
  * Validation method to narrow down union type to CANNOTBEZEROORNEGATIVE type case.
  *
  * This is CANNOT_BE_ZERO_OR_NEGATIVE case.
  */
  export function isCANNOTBEZEROORNEGATIVE(value: unknown): value is CANNOTBEZEROORNEGATIVE {
    const validationResult = validateAndMap(value, cANNOTBEZEROORNEGATIVESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DECIMALPRECISION type case.
  *
  * This is DECIMAL_PRECISION case.
  */
  export function isDECIMALPRECISION(value: unknown): value is DECIMALPRECISION {
    const validationResult = validateAndMap(value, dECIMALPRECISIONSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DECIMALSNOTSUPPORTED type case.
  *
  * This is DECIMALS_NOT_SUPPORTED case.
  */
  export function isDECIMALSNOTSUPPORTED(value: unknown): value is DECIMALSNOTSUPPORTED {
    const validationResult = validateAndMap(value, dECIMALSNOTSUPPORTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDCURRENCYCODEPayments type case.
  *
  * This is INVALID_CURRENCY_CODE_Payments case.
  */
  export function isINVALIDCURRENCYCODEPayments(value: unknown): value is INVALIDCURRENCYCODEPayments {
    const validationResult = validateAndMap(value, iNVALIDCURRENCYCODEPaymentsSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CURRENCYMISMATCH type case.
  *
  * This is CURRENCY_MISMATCH case.
  */
  export function isCURRENCYMISMATCH(value: unknown): value is CURRENCYMISMATCH {
    const validationResult = validateAndMap(value, cURRENCYMISMATCHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CANNOTBENEGATIVEPayments type case.
  *
  * This is CANNOT_BE_NEGATIVE_Payments case.
  */
  export function isCANNOTBENEGATIVEPayments(value: unknown): value is CANNOTBENEGATIVEPayments {
    const validationResult = validateAndMap(value, cANNOTBENEGATIVEPaymentsSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CAPTUREFULLYREFUNDED type case.
  *
  * This is CAPTURE_FULLY_REFUNDED case.
  */
  export function isCAPTUREFULLYREFUNDED(value: unknown): value is CAPTUREFULLYREFUNDED {
    const validationResult = validateAndMap(value, cAPTUREFULLYREFUNDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REFUNDCAPTURECURRENCYMISMATCH type case.
  *
  * This is REFUND_CAPTURE_CURRENCY_MISMATCH case.
  */
  export function isREFUNDCAPTURECURRENCYMISMATCH(value: unknown): value is REFUNDCAPTURECURRENCYMISMATCH {
    const validationResult = validateAndMap(value, rEFUNDCAPTURECURRENCYMISMATCHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REFUNDNOTALLOWED type case.
  *
  * This is REFUND_NOT_ALLOWED case.
  */
  export function isREFUNDNOTALLOWED(value: unknown): value is REFUNDNOTALLOWED {
    const validationResult = validateAndMap(value, rEFUNDNOTALLOWEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REFUNDTIMELIMITEXCEEDED type case.
  *
  * This is REFUND_TIME_LIMIT_EXCEEDED case.
  */
  export function isREFUNDTIMELIMITEXCEEDED(value: unknown): value is REFUNDTIMELIMITEXCEEDED {
    const validationResult = validateAndMap(value, rEFUNDTIMELIMITEXCEEDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REFUNDAMOUNTEXCEEDED type case.
  *
  * This is REFUND_AMOUNT_EXCEEDED case.
  */
  export function isREFUNDAMOUNTEXCEEDED(value: unknown): value is REFUNDAMOUNTEXCEEDED {
    const validationResult = validateAndMap(value, rEFUNDAMOUNTEXCEEDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REFUNDAMOUNTTOOLOW type case.
  *
  * This is REFUND_AMOUNT_TOO_LOW case.
  */
  export function isREFUNDAMOUNTTOOLOW(value: unknown): value is REFUNDAMOUNTTOOLOW {
    const validationResult = validateAndMap(value, rEFUNDAMOUNTTOOLOWSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REFUNDFAILEDINSUFFICIENTFUNDS type case.
  *
  * This is REFUND_FAILED_INSUFFICIENT_FUNDS case.
  */
  export function isREFUNDFAILEDINSUFFICIENTFUNDS(value: unknown): value is REFUNDFAILEDINSUFFICIENTFUNDS {
    const validationResult = validateAndMap(value, rEFUNDFAILEDINSUFFICIENTFUNDSSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PARTIALREFUNDNOTALLOWED type case.
  *
  * This is PARTIAL_REFUND_NOT_ALLOWED case.
  */
  export function isPARTIALREFUNDNOTALLOWED(value: unknown): value is PARTIALREFUNDNOTALLOWED {
    const validationResult = validateAndMap(value, pARTIALREFUNDNOTALLOWEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MAXNUMBEROFREFUNDSEXCEEDED type case.
  *
  * This is MAX_NUMBER_OF_REFUNDS_EXCEEDED case.
  */
  export function isMAXNUMBEROFREFUNDSEXCEEDED(value: unknown): value is MAXNUMBEROFREFUNDSEXCEEDED {
    const validationResult = validateAndMap(value, mAXNUMBEROFREFUNDSEXCEEDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PENDINGCAPTURE type case.
  *
  * This is PENDING_CAPTURE case.
  */
  export function isPENDINGCAPTURE(value: unknown): value is PENDINGCAPTURE {
    const validationResult = validateAndMap(value, pENDINGCAPTURESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DUPLICATEINVOICEID type case.
  *
  * This is DUPLICATE_INVOICE_ID case.
  */
  export function isDUPLICATEINVOICEID(value: unknown): value is DUPLICATEINVOICEID {
    const validationResult = validateAndMap(value, dUPLICATEINVOICEIDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEEACCOUNTLOCKEDORCLOSED type case.
  *
  * This is PAYEE_ACCOUNT_LOCKED_OR_CLOSED case.
  */
  export function isPAYEEACCOUNTLOCKEDORCLOSED(value: unknown): value is PAYEEACCOUNTLOCKEDORCLOSED {
    const validationResult = validateAndMap(value, pAYEEACCOUNTLOCKEDORCLOSEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYERACCOUNTLOCKEDORCLOSED type case.
  *
  * This is PAYER_ACCOUNT_LOCKED_OR_CLOSED case.
  */
  export function isPAYERACCOUNTLOCKEDORCLOSED(value: unknown): value is PAYERACCOUNTLOCKEDORCLOSED {
    const validationResult = validateAndMap(value, pAYERACCOUNTLOCKEDORCLOSEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEEACCOUNTRESTRICTED type case.
  *
  * This is PAYEE_ACCOUNT_RESTRICTED case.
  */
  export function isPAYEEACCOUNTRESTRICTED(value: unknown): value is PAYEEACCOUNTRESTRICTED {
    const validationResult = validateAndMap(value, pAYEEACCOUNTRESTRICTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REFUNDNOTPERMITTEDDUETOCHARGEBACK type case.
  *
  * This is REFUND_NOT_PERMITTED_DUE_TO_CHARGEBACK case.
  */
  export function isREFUNDNOTPERMITTEDDUETOCHARGEBACK(value: unknown): value is REFUNDNOTPERMITTEDDUETOCHARGEBACK {
    const validationResult = validateAndMap(value, rEFUNDNOTPERMITTEDDUETOCHARGEBACKSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TRANSACTIONDISPUTED type case.
  *
  * This is TRANSACTION_DISPUTED case.
  */
  export function isTRANSACTIONDISPUTED(value: unknown): value is TRANSACTIONDISPUTED {
    const validationResult = validateAndMap(value, tRANSACTIONDISPUTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PLATFORMFEEEXCEEDED type case.
  *
  * This is PLATFORM_FEE_EXCEEDED case.
  */
  export function isPLATFORMFEEEXCEEDED(value: unknown): value is PLATFORMFEEEXCEEDED {
    const validationResult = validateAndMap(value, pLATFORMFEEEXCEEDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REFUNDISRESTRICTED type case.
  *
  * This is REFUND_IS_RESTRICTED case.
  */
  export function isREFUNDISRESTRICTED(value: unknown): value is REFUNDISRESTRICTED {
    const validationResult = validateAndMap(value, rEFUNDISRESTRICTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PLATFORMFEENOTENABLED type case.
  *
  * This is PLATFORM_FEE_NOT_ENABLED case.
  */
  export function isPLATFORMFEENOTENABLED(value: unknown): value is PLATFORMFEENOTENABLED {
    const validationResult = validateAndMap(value, pLATFORMFEENOTENABLEDSchema);
    return validationResult.errors === false;
  }
}
