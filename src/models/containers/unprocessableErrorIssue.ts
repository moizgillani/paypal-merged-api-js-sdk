/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import {
  AGREEMENTALREADYCANCELLED,
  aGREEMENTALREADYCANCELLEDSchema,
} from '../aGREEMENTALREADYCANCELLED';
import {
  ALIASDECLINEDBYPROCESSOR,
  aLIASDECLINEDBYPROCESSORSchema,
} from '../aLIASDECLINEDBYPROCESSOR';
import { AMOUNTMISMATCH, aMOUNTMISMATCHSchema } from '../aMOUNTMISMATCH';
import {
  APPLEPAYAMOUNTMISMATCH,
  aPPLEPAYAMOUNTMISMATCHSchema,
} from '../aPPLEPAYAMOUNTMISMATCH';
import {
  AUTHCAPTURENOTENABLED,
  aUTHCAPTURENOTENABLEDSchema,
} from '../aUTHCAPTURENOTENABLED';
import {
  BILLINGADDRESSINVALID,
  bILLINGADDRESSINVALIDSchema,
} from '../bILLINGADDRESSINVALID';
import {
  BILLINGAGREEMENTNOTFOUND,
  bILLINGAGREEMENTNOTFOUNDSchema,
} from '../bILLINGAGREEMENTNOTFOUND';
import {
  BLIKONECLICKMISSINGREQUIREDPARAMETER,
  bLIKONECLICKMISSINGREQUIREDPARAMETERSchema,
} from '../bLIKONECLICKMISSINGREQUIREDPARAMETER';
import { CANNOTBENEGATIVE, cANNOTBENEGATIVESchema } from '../cANNOTBENEGATIVE';
import {
  CANNOTBEZEROORNEGATIVE,
  cANNOTBEZEROORNEGATIVESchema,
} from '../cANNOTBEZEROORNEGATIVE';
import { CARDEXPIRED, cARDEXPIREDSchema } from '../cARDEXPIRED';
import { CITYREQUIRED, cITYREQUIREDSchema } from '../cITYREQUIRED';
import {
  COMPLIANCEVIOLATION,
  cOMPLIANCEVIOLATIONSchema,
} from '../cOMPLIANCEVIOLATION';
import {
  CRYPTOGRAMREQUIRED,
  cRYPTOGRAMREQUIREDSchema,
} from '../cRYPTOGRAMREQUIRED';
import { DECIMALPRECISION, dECIMALPRECISIONSchema } from '../dECIMALPRECISION';
import {
  DOMESTICTRANSACTIONREQUIRED,
  dOMESTICTRANSACTIONREQUIREDSchema,
} from '../dOMESTICTRANSACTIONREQUIRED';
import {
  DONATIONITEMSNOTSUPPORTED,
  dONATIONITEMSNOTSUPPORTEDSchema,
} from '../dONATIONITEMSNOTSUPPORTED';
import {
  DUPLICATEINVOICEID,
  dUPLICATEINVOICEIDSchema,
} from '../dUPLICATEINVOICEID';
import {
  DUPLICATEREFERENCEID,
  dUPLICATEREFERENCEIDSchema,
} from '../dUPLICATEREFERENCEID';
import { EMVDATAREQUIRED, eMVDATAREQUIREDSchema } from '../eMVDATAREQUIRED';
import {
  GOOGLEPAYGATEWAYMERCHANTIDMISMATCH,
  gOOGLEPAYGATEWAYMERCHANTIDMISMATCHSchema,
} from '../gOOGLEPAYGATEWAYMERCHANTIDMISMATCH';
import {
  INCOMPATIBLEPARAMETERVALUE,
  iNCOMPATIBLEPARAMETERVALUESchema,
} from '../iNCOMPATIBLEPARAMETERVALUE';
import {
  INSTRUMENTDECLINED,
  iNSTRUMENTDECLINEDSchema,
} from '../iNSTRUMENTDECLINED';
import {
  INVALIDCURRENCYCODE,
  iNVALIDCURRENCYCODESchema,
} from '../iNVALIDCURRENCYCODE';
import {
  INVALIDEXPIRYDATE,
  iNVALIDEXPIRYDATESchema,
} from '../iNVALIDEXPIRYDATE';
import { INVALIDFXRATEID, iNVALIDFXRATEIDSchema } from '../iNVALIDFXRATEID';
import {
  INVALIDGOOGLEPAYTOKEN,
  iNVALIDGOOGLEPAYTOKENSchema,
} from '../iNVALIDGOOGLEPAYTOKEN';
import {
  INVALIDPAYEEPRICINGTIERID,
  iNVALIDPAYEEPRICINGTIERIDSchema,
} from '../iNVALIDPAYEEPRICINGTIERID';
import { INVALIDPAYERID, iNVALIDPAYERIDSchema } from '../iNVALIDPAYERID';
import {
  INVALIDPLATFORMFEESACCOUNT,
  iNVALIDPLATFORMFEESACCOUNTSchema,
} from '../iNVALIDPLATFORMFEESACCOUNT';
import {
  INVALIDPLATFORMFEESAMOUNT,
  iNVALIDPLATFORMFEESAMOUNTSchema,
} from '../iNVALIDPLATFORMFEESAMOUNT';
import {
  INVALIDPREVIOUSTRANSACTIONREFERENCE,
  iNVALIDPREVIOUSTRANSACTIONREFERENCESchema,
} from '../iNVALIDPREVIOUSTRANSACTIONREFERENCE';
import {
  INVALIDSECURITYCODELENGTH,
  iNVALIDSECURITYCODELENGTHSchema,
} from '../iNVALIDSECURITYCODELENGTH';
import {
  ITEMTOTALMISMATCH,
  iTEMTOTALMISMATCHSchema,
} from '../iTEMTOTALMISMATCH';
import {
  ITEMTOTALREQUIRED,
  iTEMTOTALREQUIREDSchema,
} from '../iTEMTOTALREQUIRED';
import {
  MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED,
  mAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDSchema,
} from '../mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED';
import { MAXVALUEEXCEEDED, mAXVALUEEXCEEDEDSchema } from '../mAXVALUEEXCEEDED';
import {
  MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS,
  mERCHANTINITIATEDWITHAUTHENTICATIONRESULTSSchema,
} from '../mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS';
import {
  MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS,
  mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSSchema,
} from '../mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS';
import {
  MERCHANTINITIATEDWITHSECURITYCODE,
  mERCHANTINITIATEDWITHSECURITYCODESchema,
} from '../mERCHANTINITIATEDWITHSECURITYCODE';
import {
  MISMATCHEDVAULTIDTOPAYMENTSOURCE,
  mISMATCHEDVAULTIDTOPAYMENTSOURCESchema,
} from '../mISMATCHEDVAULTIDTOPAYMENTSOURCE';
import {
  MISSINGCRYPTOGRAM,
  mISSINGCRYPTOGRAMSchema,
} from '../mISSINGCRYPTOGRAM';
import {
  MISSINGPICKUPADDRESS,
  mISSINGPICKUPADDRESSSchema,
} from '../mISSINGPICKUPADDRESS';
import {
  MISSINGPREVIOUSREFERENCE,
  mISSINGPREVIOUSREFERENCESchema,
} from '../mISSINGPREVIOUSREFERENCE';
import {
  MULTICURRENCYORDER,
  mULTICURRENCYORDERSchema,
} from '../mULTICURRENCYORDER';
import {
  MULTIPLEITEMCATEGORIES,
  mULTIPLEITEMCATEGORIESSchema,
} from '../mULTIPLEITEMCATEGORIES';
import {
  MULTIPLESHIPPINGADDRESSNOTSUPPORTED,
  mULTIPLESHIPPINGADDRESSNOTSUPPORTEDSchema,
} from '../mULTIPLESHIPPINGADDRESSNOTSUPPORTED';
import {
  MULTIPLESHIPPINGOPTIONSELECTED,
  mULTIPLESHIPPINGOPTIONSELECTEDSchema,
} from '../mULTIPLESHIPPINGOPTIONSELECTED';
import {
  MULTIPLESHIPPINGTYPENOTSUPPORTED,
  mULTIPLESHIPPINGTYPENOTSUPPORTEDSchema,
} from '../mULTIPLESHIPPINGTYPENOTSUPPORTED';
import {
  NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING,
  nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGSchema,
} from '../nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING';
import {
  NOTELIGIBLEFORPNREFPROCESSING,
  nOTELIGIBLEFORPNREFPROCESSINGSchema,
} from '../nOTELIGIBLEFORPNREFPROCESSING';
import {
  NOTENABLEDFORAPPLEPAY,
  nOTENABLEDFORAPPLEPAYSchema,
} from '../nOTENABLEDFORAPPLEPAY';
import {
  NOTENABLEDFORCARDPROCESSING,
  nOTENABLEDFORCARDPROCESSINGSchema,
} from '../nOTENABLEDFORCARDPROCESSING';
import {
  NOTENABLEDFORGOOGLEPAY,
  nOTENABLEDFORGOOGLEPAYSchema,
} from '../nOTENABLEDFORGOOGLEPAY';
import {
  NOTENABLEDTOVAULTPAYMENTSOURCE,
  nOTENABLEDTOVAULTPAYMENTSOURCESchema,
} from '../nOTENABLEDTOVAULTPAYMENTSOURCE';
import {
  ONEOFPARAMETERSREQUIRED,
  oNEOFPARAMETERSREQUIREDSchema,
} from '../oNEOFPARAMETERSREQUIRED';
import {
  ORDERCOMPLETEONPAYMENTAPPROVAL,
  oRDERCOMPLETEONPAYMENTAPPROVALSchema,
} from '../oRDERCOMPLETEONPAYMENTAPPROVAL';
import {
  PAYEEACCOUNTINVALID,
  pAYEEACCOUNTINVALIDSchema,
} from '../pAYEEACCOUNTINVALID';
import {
  PAYEEACCOUNTLOCKEDORCLOSED,
  pAYEEACCOUNTLOCKEDORCLOSEDSchema,
} from '../pAYEEACCOUNTLOCKEDORCLOSED';
import {
  PAYEEACCOUNTRESTRICTED,
  pAYEEACCOUNTRESTRICTEDSchema,
} from '../pAYEEACCOUNTRESTRICTED';
import {
  PAYEEBLOCKEDTRANSACTION,
  pAYEEBLOCKEDTRANSACTIONSchema,
} from '../pAYEEBLOCKEDTRANSACTION';
import {
  PAYEEFXRATEIDCURRENCYMISMATCH,
  pAYEEFXRATEIDCURRENCYMISMATCHSchema,
} from '../pAYEEFXRATEIDCURRENCYMISMATCH';
import {
  PAYEEFXRATEIDEXPIRED,
  pAYEEFXRATEIDEXPIREDSchema,
} from '../pAYEEFXRATEIDEXPIRED';
import {
  PAYEEPRICINGTIERIDNOTENABLED,
  pAYEEPRICINGTIERIDNOTENABLEDSchema,
} from '../pAYEEPRICINGTIERIDNOTENABLED';
import {
  PAYERACCOUNTLOCKEDORCLOSED,
  pAYERACCOUNTLOCKEDORCLOSEDSchema,
} from '../pAYERACCOUNTLOCKEDORCLOSED';
import {
  PAYERACCOUNTRESTRICTED,
  pAYERACCOUNTRESTRICTEDSchema,
} from '../pAYERACCOUNTRESTRICTED';
import { PAYERCANNOTPAY, pAYERCANNOTPAYSchema } from '../pAYERCANNOTPAY';
import {
  PAYMENTSOURCECANNOTBEUSED,
  pAYMENTSOURCECANNOTBEUSEDSchema,
} from '../pAYMENTSOURCECANNOTBEUSED';
import {
  PAYMENTSOURCEDECLINEDBYPROCESSOR,
  pAYMENTSOURCEDECLINEDBYPROCESSORSchema,
} from '../pAYMENTSOURCEDECLINEDBYPROCESSOR';
import {
  PAYMENTSOURCEINFOCANNOTBEVERIFIED,
  pAYMENTSOURCEINFOCANNOTBEVERIFIEDSchema,
} from '../pAYMENTSOURCEINFOCANNOTBEVERIFIED';
import {
  PAYMENTSOURCEMISMATCH,
  pAYMENTSOURCEMISMATCHSchema,
} from '../pAYMENTSOURCEMISMATCH';
import {
  PAYPALTRANSACTIONIDNOTFOUND,
  pAYPALTRANSACTIONIDNOTFOUNDSchema,
} from '../pAYPALTRANSACTIONIDNOTFOUND';
import {
  PLATFORMFEESNOTSUPPORTED,
  pLATFORMFEESNOTSUPPORTEDSchema,
} from '../pLATFORMFEESNOTSUPPORTED';
import { PNREFNOTFOUND, pNREFNOTFOUNDSchema } from '../pNREFNOTFOUND';
import {
  POSTALCODEREQUIRED,
  pOSTALCODEREQUIREDSchema,
} from '../pOSTALCODEREQUIRED';
import {
  PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH,
  pREFERREDSHIPPINGOPTIONAMOUNTMISMATCHSchema,
} from '../pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH';
import {
  PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK,
  pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKSchema,
} from '../pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK';
import {
  PREVIOUSTRANSACTIONREFERENCEVOIDED,
  pREVIOUSTRANSACTIONREFERENCEVOIDEDSchema,
} from '../pREVIOUSTRANSACTIONREFERENCEVOIDED';
import {
  REFERENCEIDREQUIRED,
  rEFERENCEIDREQUIREDSchema,
} from '../rEFERENCEIDREQUIRED';
import {
  REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT,
  rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTSchema,
} from '../rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT';
import {
  SHIPPINGADDRESSINVALID,
  sHIPPINGADDRESSINVALIDSchema,
} from '../sHIPPINGADDRESSINVALID';
import {
  SHIPPINGOPTIONNOTSELECTED,
  sHIPPINGOPTIONNOTSELECTEDSchema,
} from '../sHIPPINGOPTIONNOTSELECTED';
import {
  SHIPPINGOPTIONSNOTSUPPORTED,
  sHIPPINGOPTIONSNOTSUPPORTEDSchema,
} from '../sHIPPINGOPTIONSNOTSUPPORTED';
import {
  SHIPPINGTYPENOTSUPPORTEDFORCLIENT,
  sHIPPINGTYPENOTSUPPORTEDFORCLIENTSchema,
} from '../sHIPPINGTYPENOTSUPPORTEDFORCLIENT';
import { TAXTOTALMISMATCH, tAXTOTALMISMATCHSchema } from '../tAXTOTALMISMATCH';
import { TAXTOTALREQUIRED, tAXTOTALREQUIREDSchema } from '../tAXTOTALREQUIRED';
import { TOKENEXPIRED, tOKENEXPIREDSchema } from '../tOKENEXPIRED';
import {
  TRANSACTIONBLOCKEDBYPAYEE,
  tRANSACTIONBLOCKEDBYPAYEESchema,
} from '../tRANSACTIONBLOCKEDBYPAYEE';
import {
  TRANSACTIONLIMITEXCEEDED,
  tRANSACTIONLIMITEXCEEDEDSchema,
} from '../tRANSACTIONLIMITEXCEEDED';
import {
  TRANSACTIONRECEIVINGLIMITEXCEEDED,
  tRANSACTIONRECEIVINGLIMITEXCEEDEDSchema,
} from '../tRANSACTIONRECEIVINGLIMITEXCEEDED';
import {
  TRANSACTIONREFUSED,
  tRANSACTIONREFUSEDSchema,
} from '../tRANSACTIONREFUSED';
import {
  UNSUPPORTEDINTENT,
  uNSUPPORTEDINTENTSchema,
} from '../uNSUPPORTEDINTENT';
import {
  UNSUPPORTEDPAYMENTINSTRUCTION,
  uNSUPPORTEDPAYMENTINSTRUCTIONSchema,
} from '../uNSUPPORTEDPAYMENTINSTRUCTION';
import {
  UNSUPPORTEDPROCESSINGINSTRUCTION,
  uNSUPPORTEDPROCESSINGINSTRUCTIONSchema,
} from '../uNSUPPORTEDPROCESSINGINSTRUCTION';
import {
  UNSUPPORTEDSHIPPINGTYPE,
  uNSUPPORTEDSHIPPINGTYPESchema,
} from '../uNSUPPORTEDSHIPPINGTYPE';
import {
  VAULTINSTRUCTIONDUPLICATED,
  vAULTINSTRUCTIONDUPLICATEDSchema,
} from '../vAULTINSTRUCTIONDUPLICATED';
import {
  VAULTINSTRUCTIONREQUIRED,
  vAULTINSTRUCTIONREQUIREDSchema,
} from '../vAULTINSTRUCTIONREQUIRED';

/** This is a container type for any-of types. */
export type UnprocessableErrorIssue = AMOUNTMISMATCH | CANNOTBENEGATIVE | CANNOTBEZEROORNEGATIVE | CARDEXPIRED | MISSINGPREVIOUSREFERENCE | MISSINGCRYPTOGRAM | CITYREQUIRED | DECIMALPRECISION | DONATIONITEMSNOTSUPPORTED | DUPLICATEREFERENCEID | INVALIDCURRENCYCODE | INVALIDPAYERID | ITEMTOTALMISMATCH | ITEMTOTALREQUIRED | MAXVALUEEXCEEDED | MISSINGPICKUPADDRESS | MULTICURRENCYORDER | MULTIPLEITEMCATEGORIES | MULTIPLESHIPPINGADDRESSNOTSUPPORTED | MULTIPLESHIPPINGTYPENOTSUPPORTED | PAYEEACCOUNTINVALID | PAYEEACCOUNTLOCKEDORCLOSED | PAYEEACCOUNTRESTRICTED | PAYEEPRICINGTIERIDNOTENABLED | INVALIDPAYEEPRICINGTIERID | PAYEEFXRATEIDEXPIRED | PAYEEFXRATEIDCURRENCYMISMATCH | INVALIDFXRATEID | PLATFORMFEESNOTSUPPORTED | INVALIDPLATFORMFEESACCOUNT | INVALIDPLATFORMFEESAMOUNT | POSTALCODEREQUIRED | REFERENCEIDREQUIRED | SHIPPINGOPTIONSNOTSUPPORTED | TAXTOTALMISMATCH | TAXTOTALREQUIRED | UNSUPPORTEDINTENT | UNSUPPORTEDPAYMENTINSTRUCTION | SHIPPINGTYPENOTSUPPORTEDFORCLIENT | UNSUPPORTEDSHIPPINGTYPE | SHIPPINGOPTIONNOTSELECTED | MULTIPLESHIPPINGOPTIONSELECTED | PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH | AGREEMENTALREADYCANCELLED | BILLINGAGREEMENTNOTFOUND | COMPLIANCEVIOLATION | DOMESTICTRANSACTIONREQUIRED | DUPLICATEINVOICEID | INSTRUMENTDECLINED | MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED | NOTENABLEDFORCARDPROCESSING | PAYEEBLOCKEDTRANSACTION | PAYERACCOUNTLOCKEDORCLOSED | PAYERACCOUNTRESTRICTED | PAYERCANNOTPAY | TRANSACTIONBLOCKEDBYPAYEE | TRANSACTIONLIMITEXCEEDED | TRANSACTIONRECEIVINGLIMITEXCEEDED | TRANSACTIONREFUSED | AUTHCAPTURENOTENABLED | UNSUPPORTEDPROCESSINGINSTRUCTION | ORDERCOMPLETEONPAYMENTAPPROVAL | INVALIDEXPIRYDATE | INCOMPATIBLEPARAMETERVALUE | INVALIDPREVIOUSTRANSACTIONREFERENCE | PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK | PREVIOUSTRANSACTIONREFERENCEVOIDED | PAYMENTSOURCEMISMATCH | MERCHANTINITIATEDWITHSECURITYCODE | MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS | MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS | PAYMENTSOURCEINFOCANNOTBEVERIFIED | PAYMENTSOURCEDECLINEDBYPROCESSOR | PAYMENTSOURCECANNOTBEUSED | NOTENABLEDFORAPPLEPAY | NOTENABLEDFORGOOGLEPAY | APPLEPAYAMOUNTMISMATCH | BILLINGADDRESSINVALID | SHIPPINGADDRESSINVALID | VAULTINSTRUCTIONDUPLICATED | VAULTINSTRUCTIONREQUIRED | MISMATCHEDVAULTIDTOPAYMENTSOURCE | CRYPTOGRAMREQUIRED | EMVDATAREQUIRED | NOTELIGIBLEFORPNREFPROCESSING | NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING | PAYPALTRANSACTIONIDNOTFOUND | PNREFNOTFOUND | INVALIDSECURITYCODELENGTH | NOTENABLEDTOVAULTPAYMENTSOURCE | REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT | TOKENEXPIRED | INVALIDGOOGLEPAYTOKEN | GOOGLEPAYGATEWAYMERCHANTIDMISMATCH | ONEOFPARAMETERSREQUIRED | ALIASDECLINEDBYPROCESSOR | BLIKONECLICKMISSINGREQUIREDPARAMETER;

export const unprocessableErrorIssueSchema: Schema<UnprocessableErrorIssue> = anyOf(
  [
    aMOUNTMISMATCHSchema,
    cANNOTBENEGATIVESchema,
    cANNOTBEZEROORNEGATIVESchema,
    cARDEXPIREDSchema,
    mISSINGPREVIOUSREFERENCESchema,
    mISSINGCRYPTOGRAMSchema,
    cITYREQUIREDSchema,
    dECIMALPRECISIONSchema,
    dONATIONITEMSNOTSUPPORTEDSchema,
    dUPLICATEREFERENCEIDSchema,
    iNVALIDCURRENCYCODESchema,
    iNVALIDPAYERIDSchema,
    iTEMTOTALMISMATCHSchema,
    iTEMTOTALREQUIREDSchema,
    mAXVALUEEXCEEDEDSchema,
    mISSINGPICKUPADDRESSSchema,
    mULTICURRENCYORDERSchema,
    mULTIPLEITEMCATEGORIESSchema,
    mULTIPLESHIPPINGADDRESSNOTSUPPORTEDSchema,
    mULTIPLESHIPPINGTYPENOTSUPPORTEDSchema,
    pAYEEACCOUNTINVALIDSchema,
    pAYEEACCOUNTLOCKEDORCLOSEDSchema,
    pAYEEACCOUNTRESTRICTEDSchema,
    pAYEEPRICINGTIERIDNOTENABLEDSchema,
    iNVALIDPAYEEPRICINGTIERIDSchema,
    pAYEEFXRATEIDEXPIREDSchema,
    pAYEEFXRATEIDCURRENCYMISMATCHSchema,
    iNVALIDFXRATEIDSchema,
    pLATFORMFEESNOTSUPPORTEDSchema,
    iNVALIDPLATFORMFEESACCOUNTSchema,
    iNVALIDPLATFORMFEESAMOUNTSchema,
    pOSTALCODEREQUIREDSchema,
    rEFERENCEIDREQUIREDSchema,
    sHIPPINGOPTIONSNOTSUPPORTEDSchema,
    tAXTOTALMISMATCHSchema,
    tAXTOTALREQUIREDSchema,
    uNSUPPORTEDINTENTSchema,
    uNSUPPORTEDPAYMENTINSTRUCTIONSchema,
    sHIPPINGTYPENOTSUPPORTEDFORCLIENTSchema,
    uNSUPPORTEDSHIPPINGTYPESchema,
    sHIPPINGOPTIONNOTSELECTEDSchema,
    mULTIPLESHIPPINGOPTIONSELECTEDSchema,
    pREFERREDSHIPPINGOPTIONAMOUNTMISMATCHSchema,
    aGREEMENTALREADYCANCELLEDSchema,
    bILLINGAGREEMENTNOTFOUNDSchema,
    cOMPLIANCEVIOLATIONSchema,
    dOMESTICTRANSACTIONREQUIREDSchema,
    dUPLICATEINVOICEIDSchema,
    iNSTRUMENTDECLINEDSchema,
    mAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDSchema,
    nOTENABLEDFORCARDPROCESSINGSchema,
    pAYEEBLOCKEDTRANSACTIONSchema,
    pAYERACCOUNTLOCKEDORCLOSEDSchema,
    pAYERACCOUNTRESTRICTEDSchema,
    pAYERCANNOTPAYSchema,
    tRANSACTIONBLOCKEDBYPAYEESchema,
    tRANSACTIONLIMITEXCEEDEDSchema,
    tRANSACTIONRECEIVINGLIMITEXCEEDEDSchema,
    tRANSACTIONREFUSEDSchema,
    aUTHCAPTURENOTENABLEDSchema,
    uNSUPPORTEDPROCESSINGINSTRUCTIONSchema,
    oRDERCOMPLETEONPAYMENTAPPROVALSchema,
    iNVALIDEXPIRYDATESchema,
    iNCOMPATIBLEPARAMETERVALUESchema,
    iNVALIDPREVIOUSTRANSACTIONREFERENCESchema,
    pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKSchema,
    pREVIOUSTRANSACTIONREFERENCEVOIDEDSchema,
    pAYMENTSOURCEMISMATCHSchema,
    mERCHANTINITIATEDWITHSECURITYCODESchema,
    mERCHANTINITIATEDWITHAUTHENTICATIONRESULTSSchema,
    mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSSchema,
    pAYMENTSOURCEINFOCANNOTBEVERIFIEDSchema,
    pAYMENTSOURCEDECLINEDBYPROCESSORSchema,
    pAYMENTSOURCECANNOTBEUSEDSchema,
    nOTENABLEDFORAPPLEPAYSchema,
    nOTENABLEDFORGOOGLEPAYSchema,
    aPPLEPAYAMOUNTMISMATCHSchema,
    bILLINGADDRESSINVALIDSchema,
    sHIPPINGADDRESSINVALIDSchema,
    vAULTINSTRUCTIONDUPLICATEDSchema,
    vAULTINSTRUCTIONREQUIREDSchema,
    mISMATCHEDVAULTIDTOPAYMENTSOURCESchema,
    cRYPTOGRAMREQUIREDSchema,
    eMVDATAREQUIREDSchema,
    nOTELIGIBLEFORPNREFPROCESSINGSchema,
    nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGSchema,
    pAYPALTRANSACTIONIDNOTFOUNDSchema,
    pNREFNOTFOUNDSchema,
    iNVALIDSECURITYCODELENGTHSchema,
    nOTENABLEDTOVAULTPAYMENTSOURCESchema,
    rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTSchema,
    tOKENEXPIREDSchema,
    iNVALIDGOOGLEPAYTOKENSchema,
    gOOGLEPAYGATEWAYMERCHANTIDMISMATCHSchema,
    oNEOFPARAMETERSREQUIREDSchema,
    aLIASDECLINEDBYPROCESSORSchema,
    bLIKONECLICKMISSINGREQUIREDPARAMETERSchema,
  ]
);

export namespace UnprocessableErrorIssue {
  /**
  * Validation method to narrow down union type to AMOUNTMISMATCH type case.
  *
  * This is AMOUNT_MISMATCH case.
  */
  export function isAMOUNTMISMATCH(value: unknown): value is AMOUNTMISMATCH {
    const validationResult = validateAndMap(value, aMOUNTMISMATCHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CANNOTBENEGATIVE type case.
  *
  * This is CANNOT_BE_NEGATIVE case.
  */
  export function isCANNOTBENEGATIVE(value: unknown): value is CANNOTBENEGATIVE {
    const validationResult = validateAndMap(value, cANNOTBENEGATIVESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CANNOTBEZEROORNEGATIVE type case.
  *
  * This is CANNOT_BE_ZERO_OR_NEGATIVE case.
  */
  export function isCANNOTBEZEROORNEGATIVE(value: unknown): value is CANNOTBEZEROORNEGATIVE {
    const validationResult = validateAndMap(value, cANNOTBEZEROORNEGATIVESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CARDEXPIRED type case.
  *
  * This is CARD_EXPIRED case.
  */
  export function isCARDEXPIRED(value: unknown): value is CARDEXPIRED {
    const validationResult = validateAndMap(value, cARDEXPIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISSINGPREVIOUSREFERENCE type case.
  *
  * This is MISSING_PREVIOUS_REFERENCE case.
  */
  export function isMISSINGPREVIOUSREFERENCE(value: unknown): value is MISSINGPREVIOUSREFERENCE {
    const validationResult = validateAndMap(value, mISSINGPREVIOUSREFERENCESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISSINGCRYPTOGRAM type case.
  *
  * This is MISSING_CRYPTOGRAM case.
  */
  export function isMISSINGCRYPTOGRAM(value: unknown): value is MISSINGCRYPTOGRAM {
    const validationResult = validateAndMap(value, mISSINGCRYPTOGRAMSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CITYREQUIRED type case.
  *
  * This is CITY_REQUIRED case.
  */
  export function isCITYREQUIRED(value: unknown): value is CITYREQUIRED {
    const validationResult = validateAndMap(value, cITYREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DECIMALPRECISION type case.
  *
  * This is DECIMAL_PRECISION case.
  */
  export function isDECIMALPRECISION(value: unknown): value is DECIMALPRECISION {
    const validationResult = validateAndMap(value, dECIMALPRECISIONSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DONATIONITEMSNOTSUPPORTED type case.
  *
  * This is DONATION_ITEMS_NOT_SUPPORTED case.
  */
  export function isDONATIONITEMSNOTSUPPORTED(value: unknown): value is DONATIONITEMSNOTSUPPORTED {
    const validationResult = validateAndMap(value, dONATIONITEMSNOTSUPPORTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DUPLICATEREFERENCEID type case.
  *
  * This is DUPLICATE_REFERENCE_ID case.
  */
  export function isDUPLICATEREFERENCEID(value: unknown): value is DUPLICATEREFERENCEID {
    const validationResult = validateAndMap(value, dUPLICATEREFERENCEIDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDCURRENCYCODE type case.
  *
  * This is INVALID_CURRENCY_CODE case.
  */
  export function isINVALIDCURRENCYCODE(value: unknown): value is INVALIDCURRENCYCODE {
    const validationResult = validateAndMap(value, iNVALIDCURRENCYCODESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDPAYERID type case.
  *
  * This is INVALID_PAYER_ID case.
  */
  export function isINVALIDPAYERID(value: unknown): value is INVALIDPAYERID {
    const validationResult = validateAndMap(value, iNVALIDPAYERIDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ITEMTOTALMISMATCH type case.
  *
  * This is ITEM_TOTAL_MISMATCH case.
  */
  export function isITEMTOTALMISMATCH(value: unknown): value is ITEMTOTALMISMATCH {
    const validationResult = validateAndMap(value, iTEMTOTALMISMATCHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ITEMTOTALREQUIRED type case.
  *
  * This is ITEM_TOTAL_REQUIRED case.
  */
  export function isITEMTOTALREQUIRED(value: unknown): value is ITEMTOTALREQUIRED {
    const validationResult = validateAndMap(value, iTEMTOTALREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MAXVALUEEXCEEDED type case.
  *
  * This is MAX_VALUE_EXCEEDED case.
  */
  export function isMAXVALUEEXCEEDED(value: unknown): value is MAXVALUEEXCEEDED {
    const validationResult = validateAndMap(value, mAXVALUEEXCEEDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISSINGPICKUPADDRESS type case.
  *
  * This is MISSING_PICKUP_ADDRESS case.
  */
  export function isMISSINGPICKUPADDRESS(value: unknown): value is MISSINGPICKUPADDRESS {
    const validationResult = validateAndMap(value, mISSINGPICKUPADDRESSSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MULTICURRENCYORDER type case.
  *
  * This is MULTI_CURRENCY_ORDER case.
  */
  export function isMULTICURRENCYORDER(value: unknown): value is MULTICURRENCYORDER {
    const validationResult = validateAndMap(value, mULTICURRENCYORDERSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MULTIPLEITEMCATEGORIES type case.
  *
  * This is MULTIPLE_ITEM_CATEGORIES case.
  */
  export function isMULTIPLEITEMCATEGORIES(value: unknown): value is MULTIPLEITEMCATEGORIES {
    const validationResult = validateAndMap(value, mULTIPLEITEMCATEGORIESSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MULTIPLESHIPPINGADDRESSNOTSUPPORTED type case.
  *
  * This is MULTIPLE_SHIPPING_ADDRESS_NOT_SUPPORTED case.
  */
  export function isMULTIPLESHIPPINGADDRESSNOTSUPPORTED(value: unknown): value is MULTIPLESHIPPINGADDRESSNOTSUPPORTED {
    const validationResult = validateAndMap(value, mULTIPLESHIPPINGADDRESSNOTSUPPORTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MULTIPLESHIPPINGTYPENOTSUPPORTED type case.
  *
  * This is MULTIPLE_SHIPPING_TYPE_NOT_SUPPORTED case.
  */
  export function isMULTIPLESHIPPINGTYPENOTSUPPORTED(value: unknown): value is MULTIPLESHIPPINGTYPENOTSUPPORTED {
    const validationResult = validateAndMap(value, mULTIPLESHIPPINGTYPENOTSUPPORTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEEACCOUNTINVALID type case.
  *
  * This is PAYEE_ACCOUNT_INVALID case.
  */
  export function isPAYEEACCOUNTINVALID(value: unknown): value is PAYEEACCOUNTINVALID {
    const validationResult = validateAndMap(value, pAYEEACCOUNTINVALIDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEEACCOUNTLOCKEDORCLOSED type case.
  *
  * This is PAYEE_ACCOUNT_LOCKED_OR_CLOSED case.
  */
  export function isPAYEEACCOUNTLOCKEDORCLOSED(value: unknown): value is PAYEEACCOUNTLOCKEDORCLOSED {
    const validationResult = validateAndMap(value, pAYEEACCOUNTLOCKEDORCLOSEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEEACCOUNTRESTRICTED type case.
  *
  * This is PAYEE_ACCOUNT_RESTRICTED case.
  */
  export function isPAYEEACCOUNTRESTRICTED(value: unknown): value is PAYEEACCOUNTRESTRICTED {
    const validationResult = validateAndMap(value, pAYEEACCOUNTRESTRICTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEEPRICINGTIERIDNOTENABLED type case.
  *
  * This is PAYEE_PRICING_TIER_ID_NOT_ENABLED case.
  */
  export function isPAYEEPRICINGTIERIDNOTENABLED(value: unknown): value is PAYEEPRICINGTIERIDNOTENABLED {
    const validationResult = validateAndMap(value, pAYEEPRICINGTIERIDNOTENABLEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDPAYEEPRICINGTIERID type case.
  *
  * This is INVALID_PAYEE_PRICING_TIER_ID case.
  */
  export function isINVALIDPAYEEPRICINGTIERID(value: unknown): value is INVALIDPAYEEPRICINGTIERID {
    const validationResult = validateAndMap(value, iNVALIDPAYEEPRICINGTIERIDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEEFXRATEIDEXPIRED type case.
  *
  * This is PAYEE_FX_RATE_ID_EXPIRED case.
  */
  export function isPAYEEFXRATEIDEXPIRED(value: unknown): value is PAYEEFXRATEIDEXPIRED {
    const validationResult = validateAndMap(value, pAYEEFXRATEIDEXPIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEEFXRATEIDCURRENCYMISMATCH type case.
  *
  * This is PAYEE_FX_RATE_ID_CURRENCY_MISMATCH case.
  */
  export function isPAYEEFXRATEIDCURRENCYMISMATCH(value: unknown): value is PAYEEFXRATEIDCURRENCYMISMATCH {
    const validationResult = validateAndMap(value, pAYEEFXRATEIDCURRENCYMISMATCHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDFXRATEID type case.
  *
  * This is INVALID_FX_RATE_ID case.
  */
  export function isINVALIDFXRATEID(value: unknown): value is INVALIDFXRATEID {
    const validationResult = validateAndMap(value, iNVALIDFXRATEIDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PLATFORMFEESNOTSUPPORTED type case.
  *
  * This is PLATFORM_FEES_NOT_SUPPORTED case.
  */
  export function isPLATFORMFEESNOTSUPPORTED(value: unknown): value is PLATFORMFEESNOTSUPPORTED {
    const validationResult = validateAndMap(value, pLATFORMFEESNOTSUPPORTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDPLATFORMFEESACCOUNT type case.
  *
  * This is INVALID_PLATFORM_FEES_ACCOUNT case.
  */
  export function isINVALIDPLATFORMFEESACCOUNT(value: unknown): value is INVALIDPLATFORMFEESACCOUNT {
    const validationResult = validateAndMap(value, iNVALIDPLATFORMFEESACCOUNTSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDPLATFORMFEESAMOUNT type case.
  *
  * This is INVALID_PLATFORM_FEES_AMOUNT case.
  */
  export function isINVALIDPLATFORMFEESAMOUNT(value: unknown): value is INVALIDPLATFORMFEESAMOUNT {
    const validationResult = validateAndMap(value, iNVALIDPLATFORMFEESAMOUNTSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to POSTALCODEREQUIRED type case.
  *
  * This is POSTAL_CODE_REQUIRED case.
  */
  export function isPOSTALCODEREQUIRED(value: unknown): value is POSTALCODEREQUIRED {
    const validationResult = validateAndMap(value, pOSTALCODEREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REFERENCEIDREQUIRED type case.
  *
  * This is REFERENCE_ID_REQUIRED case.
  */
  export function isREFERENCEIDREQUIRED(value: unknown): value is REFERENCEIDREQUIRED {
    const validationResult = validateAndMap(value, rEFERENCEIDREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SHIPPINGOPTIONSNOTSUPPORTED type case.
  *
  * This is SHIPPING_OPTIONS_NOT_SUPPORTED case.
  */
  export function isSHIPPINGOPTIONSNOTSUPPORTED(value: unknown): value is SHIPPINGOPTIONSNOTSUPPORTED {
    const validationResult = validateAndMap(value, sHIPPINGOPTIONSNOTSUPPORTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TAXTOTALMISMATCH type case.
  *
  * This is TAX_TOTAL_MISMATCH case.
  */
  export function isTAXTOTALMISMATCH(value: unknown): value is TAXTOTALMISMATCH {
    const validationResult = validateAndMap(value, tAXTOTALMISMATCHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TAXTOTALREQUIRED type case.
  *
  * This is TAX_TOTAL_REQUIRED case.
  */
  export function isTAXTOTALREQUIRED(value: unknown): value is TAXTOTALREQUIRED {
    const validationResult = validateAndMap(value, tAXTOTALREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to UNSUPPORTEDINTENT type case.
  *
  * This is UNSUPPORTED_INTENT case.
  */
  export function isUNSUPPORTEDINTENT(value: unknown): value is UNSUPPORTEDINTENT {
    const validationResult = validateAndMap(value, uNSUPPORTEDINTENTSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to UNSUPPORTEDPAYMENTINSTRUCTION type case.
  *
  * This is UNSUPPORTED_PAYMENT_INSTRUCTION case.
  */
  export function isUNSUPPORTEDPAYMENTINSTRUCTION(value: unknown): value is UNSUPPORTEDPAYMENTINSTRUCTION {
    const validationResult = validateAndMap(value, uNSUPPORTEDPAYMENTINSTRUCTIONSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SHIPPINGTYPENOTSUPPORTEDFORCLIENT type case.
  *
  * This is SHIPPING_TYPE_NOT_SUPPORTED_FOR_CLIENT case.
  */
  export function isSHIPPINGTYPENOTSUPPORTEDFORCLIENT(value: unknown): value is SHIPPINGTYPENOTSUPPORTEDFORCLIENT {
    const validationResult = validateAndMap(value, sHIPPINGTYPENOTSUPPORTEDFORCLIENTSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to UNSUPPORTEDSHIPPINGTYPE type case.
  *
  * This is UNSUPPORTED_SHIPPING_TYPE case.
  */
  export function isUNSUPPORTEDSHIPPINGTYPE(value: unknown): value is UNSUPPORTEDSHIPPINGTYPE {
    const validationResult = validateAndMap(value, uNSUPPORTEDSHIPPINGTYPESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SHIPPINGOPTIONNOTSELECTED type case.
  *
  * This is SHIPPING_OPTION_NOT_SELECTED case.
  */
  export function isSHIPPINGOPTIONNOTSELECTED(value: unknown): value is SHIPPINGOPTIONNOTSELECTED {
    const validationResult = validateAndMap(value, sHIPPINGOPTIONNOTSELECTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MULTIPLESHIPPINGOPTIONSELECTED type case.
  *
  * This is MULTIPLE_SHIPPING_OPTION_SELECTED case.
  */
  export function isMULTIPLESHIPPINGOPTIONSELECTED(value: unknown): value is MULTIPLESHIPPINGOPTIONSELECTED {
    const validationResult = validateAndMap(value, mULTIPLESHIPPINGOPTIONSELECTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH type case.
  *
  * This is PREFERRED_SHIPPING_OPTION_AMOUNT_MISMATCH case.
  */
  export function isPREFERREDSHIPPINGOPTIONAMOUNTMISMATCH(value: unknown): value is PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH {
    const validationResult = validateAndMap(value, pREFERREDSHIPPINGOPTIONAMOUNTMISMATCHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to AGREEMENTALREADYCANCELLED type case.
  *
  * This is AGREEMENT_ALREADY_CANCELLED case.
  */
  export function isAGREEMENTALREADYCANCELLED(value: unknown): value is AGREEMENTALREADYCANCELLED {
    const validationResult = validateAndMap(value, aGREEMENTALREADYCANCELLEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to BILLINGAGREEMENTNOTFOUND type case.
  *
  * This is BILLING_AGREEMENT_NOT_FOUND case.
  */
  export function isBILLINGAGREEMENTNOTFOUND(value: unknown): value is BILLINGAGREEMENTNOTFOUND {
    const validationResult = validateAndMap(value, bILLINGAGREEMENTNOTFOUNDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to COMPLIANCEVIOLATION type case.
  *
  * This is COMPLIANCE_VIOLATION case.
  */
  export function isCOMPLIANCEVIOLATION(value: unknown): value is COMPLIANCEVIOLATION {
    const validationResult = validateAndMap(value, cOMPLIANCEVIOLATIONSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DOMESTICTRANSACTIONREQUIRED type case.
  *
  * This is DOMESTIC_TRANSACTION_REQUIRED case.
  */
  export function isDOMESTICTRANSACTIONREQUIRED(value: unknown): value is DOMESTICTRANSACTIONREQUIRED {
    const validationResult = validateAndMap(value, dOMESTICTRANSACTIONREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DUPLICATEINVOICEID type case.
  *
  * This is DUPLICATE_INVOICE_ID case.
  */
  export function isDUPLICATEINVOICEID(value: unknown): value is DUPLICATEINVOICEID {
    const validationResult = validateAndMap(value, dUPLICATEINVOICEIDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INSTRUMENTDECLINED type case.
  *
  * This is INSTRUMENT_DECLINED case.
  */
  export function isINSTRUMENTDECLINED(value: unknown): value is INSTRUMENTDECLINED {
    const validationResult = validateAndMap(value, iNSTRUMENTDECLINEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED type case.
  *
  * This is MAX_NUMBER_OF_PAYMENT_ATTEMPTS_EXCEEDED case.
  */
  export function isMAXNUMBEROFPAYMENTATTEMPTSEXCEEDED(value: unknown): value is MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED {
    const validationResult = validateAndMap(value, mAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTENABLEDFORCARDPROCESSING type case.
  *
  * This is NOT_ENABLED_FOR_CARD_PROCESSING case.
  */
  export function isNOTENABLEDFORCARDPROCESSING(value: unknown): value is NOTENABLEDFORCARDPROCESSING {
    const validationResult = validateAndMap(value, nOTENABLEDFORCARDPROCESSINGSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEEBLOCKEDTRANSACTION type case.
  *
  * This is PAYEE_BLOCKED_TRANSACTION case.
  */
  export function isPAYEEBLOCKEDTRANSACTION(value: unknown): value is PAYEEBLOCKEDTRANSACTION {
    const validationResult = validateAndMap(value, pAYEEBLOCKEDTRANSACTIONSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYERACCOUNTLOCKEDORCLOSED type case.
  *
  * This is PAYER_ACCOUNT_LOCKED_OR_CLOSED case.
  */
  export function isPAYERACCOUNTLOCKEDORCLOSED(value: unknown): value is PAYERACCOUNTLOCKEDORCLOSED {
    const validationResult = validateAndMap(value, pAYERACCOUNTLOCKEDORCLOSEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYERACCOUNTRESTRICTED type case.
  *
  * This is PAYER_ACCOUNT_RESTRICTED case.
  */
  export function isPAYERACCOUNTRESTRICTED(value: unknown): value is PAYERACCOUNTRESTRICTED {
    const validationResult = validateAndMap(value, pAYERACCOUNTRESTRICTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYERCANNOTPAY type case.
  *
  * This is PAYER_CANNOT_PAY case.
  */
  export function isPAYERCANNOTPAY(value: unknown): value is PAYERCANNOTPAY {
    const validationResult = validateAndMap(value, pAYERCANNOTPAYSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TRANSACTIONBLOCKEDBYPAYEE type case.
  *
  * This is TRANSACTION_BLOCKED_BY_PAYEE case.
  */
  export function isTRANSACTIONBLOCKEDBYPAYEE(value: unknown): value is TRANSACTIONBLOCKEDBYPAYEE {
    const validationResult = validateAndMap(value, tRANSACTIONBLOCKEDBYPAYEESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TRANSACTIONLIMITEXCEEDED type case.
  *
  * This is TRANSACTION_LIMIT_EXCEEDED case.
  */
  export function isTRANSACTIONLIMITEXCEEDED(value: unknown): value is TRANSACTIONLIMITEXCEEDED {
    const validationResult = validateAndMap(value, tRANSACTIONLIMITEXCEEDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TRANSACTIONRECEIVINGLIMITEXCEEDED type case.
  *
  * This is TRANSACTION_RECEIVING_LIMIT_EXCEEDED case.
  */
  export function isTRANSACTIONRECEIVINGLIMITEXCEEDED(value: unknown): value is TRANSACTIONRECEIVINGLIMITEXCEEDED {
    const validationResult = validateAndMap(value, tRANSACTIONRECEIVINGLIMITEXCEEDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TRANSACTIONREFUSED type case.
  *
  * This is TRANSACTION_REFUSED case.
  */
  export function isTRANSACTIONREFUSED(value: unknown): value is TRANSACTIONREFUSED {
    const validationResult = validateAndMap(value, tRANSACTIONREFUSEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to AUTHCAPTURENOTENABLED type case.
  *
  * This is AUTH_CAPTURE_NOT_ENABLED case.
  */
  export function isAUTHCAPTURENOTENABLED(value: unknown): value is AUTHCAPTURENOTENABLED {
    const validationResult = validateAndMap(value, aUTHCAPTURENOTENABLEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to UNSUPPORTEDPROCESSINGINSTRUCTION type case.
  *
  * This is UNSUPPORTED_PROCESSING_INSTRUCTION case.
  */
  export function isUNSUPPORTEDPROCESSINGINSTRUCTION(value: unknown): value is UNSUPPORTEDPROCESSINGINSTRUCTION {
    const validationResult = validateAndMap(value, uNSUPPORTEDPROCESSINGINSTRUCTIONSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ORDERCOMPLETEONPAYMENTAPPROVAL type case.
  *
  * This is ORDER_COMPLETE_ON_PAYMENT_APPROVAL case.
  */
  export function isORDERCOMPLETEONPAYMENTAPPROVAL(value: unknown): value is ORDERCOMPLETEONPAYMENTAPPROVAL {
    const validationResult = validateAndMap(value, oRDERCOMPLETEONPAYMENTAPPROVALSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDEXPIRYDATE type case.
  *
  * This is INVALID_EXPIRY_DATE case.
  */
  export function isINVALIDEXPIRYDATE(value: unknown): value is INVALIDEXPIRYDATE {
    const validationResult = validateAndMap(value, iNVALIDEXPIRYDATESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INCOMPATIBLEPARAMETERVALUE type case.
  *
  * This is INCOMPATIBLE_PARAMETER_VALUE case.
  */
  export function isINCOMPATIBLEPARAMETERVALUE(value: unknown): value is INCOMPATIBLEPARAMETERVALUE {
    const validationResult = validateAndMap(value, iNCOMPATIBLEPARAMETERVALUESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDPREVIOUSTRANSACTIONREFERENCE type case.
  *
  * This is INVALID_PREVIOUS_TRANSACTION_REFERENCE case.
  */
  export function isINVALIDPREVIOUSTRANSACTIONREFERENCE(value: unknown): value is INVALIDPREVIOUSTRANSACTIONREFERENCE {
    const validationResult = validateAndMap(value, iNVALIDPREVIOUSTRANSACTIONREFERENCESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK type case.
  *
  * This is PREVIOUS_TRANSACTION_REFERENCE_HAS_CHARGEBACK case.
  */
  export function isPREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK(value: unknown): value is PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK {
    const validationResult = validateAndMap(value, pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PREVIOUSTRANSACTIONREFERENCEVOIDED type case.
  *
  * This is PREVIOUS_TRANSACTION_REFERENCE_VOIDED case.
  */
  export function isPREVIOUSTRANSACTIONREFERENCEVOIDED(value: unknown): value is PREVIOUSTRANSACTIONREFERENCEVOIDED {
    const validationResult = validateAndMap(value, pREVIOUSTRANSACTIONREFERENCEVOIDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYMENTSOURCEMISMATCH type case.
  *
  * This is PAYMENT_SOURCE_MISMATCH case.
  */
  export function isPAYMENTSOURCEMISMATCH(value: unknown): value is PAYMENTSOURCEMISMATCH {
    const validationResult = validateAndMap(value, pAYMENTSOURCEMISMATCHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MERCHANTINITIATEDWITHSECURITYCODE type case.
  *
  * This is MERCHANT_INITIATED_WITH_SECURITY_CODE case.
  */
  export function isMERCHANTINITIATEDWITHSECURITYCODE(value: unknown): value is MERCHANTINITIATEDWITHSECURITYCODE {
    const validationResult = validateAndMap(value, mERCHANTINITIATEDWITHSECURITYCODESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS type case.
  *
  * This is MERCHANT_INITIATED_WITH_AUTHENTICATION_RESULTS case.
  */
  export function isMERCHANTINITIATEDWITHAUTHENTICATIONRESULTS(value: unknown): value is MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS {
    const validationResult = validateAndMap(value, mERCHANTINITIATEDWITHAUTHENTICATIONRESULTSSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS type case.
  *
  * This is MERCHANT_INITIATED_WITH_MULTIPLE_PURCHASE_UNITS case.
  */
  export function isMERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS(value: unknown): value is MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS {
    const validationResult = validateAndMap(value, mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYMENTSOURCEINFOCANNOTBEVERIFIED type case.
  *
  * This is PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED case.
  */
  export function isPAYMENTSOURCEINFOCANNOTBEVERIFIED(value: unknown): value is PAYMENTSOURCEINFOCANNOTBEVERIFIED {
    const validationResult = validateAndMap(value, pAYMENTSOURCEINFOCANNOTBEVERIFIEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYMENTSOURCEDECLINEDBYPROCESSOR type case.
  *
  * This is PAYMENT_SOURCE_DECLINED_BY_PROCESSOR case.
  */
  export function isPAYMENTSOURCEDECLINEDBYPROCESSOR(value: unknown): value is PAYMENTSOURCEDECLINEDBYPROCESSOR {
    const validationResult = validateAndMap(value, pAYMENTSOURCEDECLINEDBYPROCESSORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYMENTSOURCECANNOTBEUSED type case.
  *
  * This is PAYMENT_SOURCE_CANNOT_BE_USED case.
  */
  export function isPAYMENTSOURCECANNOTBEUSED(value: unknown): value is PAYMENTSOURCECANNOTBEUSED {
    const validationResult = validateAndMap(value, pAYMENTSOURCECANNOTBEUSEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTENABLEDFORAPPLEPAY type case.
  *
  * This is NOT_ENABLED_FOR_APPLE_PAY case.
  */
  export function isNOTENABLEDFORAPPLEPAY(value: unknown): value is NOTENABLEDFORAPPLEPAY {
    const validationResult = validateAndMap(value, nOTENABLEDFORAPPLEPAYSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTENABLEDFORGOOGLEPAY type case.
  *
  * This is NOT_ENABLED_FOR_GOOGLE_PAY case.
  */
  export function isNOTENABLEDFORGOOGLEPAY(value: unknown): value is NOTENABLEDFORGOOGLEPAY {
    const validationResult = validateAndMap(value, nOTENABLEDFORGOOGLEPAYSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to APPLEPAYAMOUNTMISMATCH type case.
  *
  * This is APPLE_PAY_AMOUNT_MISMATCH case.
  */
  export function isAPPLEPAYAMOUNTMISMATCH(value: unknown): value is APPLEPAYAMOUNTMISMATCH {
    const validationResult = validateAndMap(value, aPPLEPAYAMOUNTMISMATCHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to BILLINGADDRESSINVALID type case.
  *
  * This is BILLING_ADDRESS_INVALID case.
  */
  export function isBILLINGADDRESSINVALID(value: unknown): value is BILLINGADDRESSINVALID {
    const validationResult = validateAndMap(value, bILLINGADDRESSINVALIDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SHIPPINGADDRESSINVALID type case.
  *
  * This is SHIPPING_ADDRESS_INVALID case.
  */
  export function isSHIPPINGADDRESSINVALID(value: unknown): value is SHIPPINGADDRESSINVALID {
    const validationResult = validateAndMap(value, sHIPPINGADDRESSINVALIDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to VAULTINSTRUCTIONDUPLICATED type case.
  *
  * This is VAULT_INSTRUCTION_DUPLICATED case.
  */
  export function isVAULTINSTRUCTIONDUPLICATED(value: unknown): value is VAULTINSTRUCTIONDUPLICATED {
    const validationResult = validateAndMap(value, vAULTINSTRUCTIONDUPLICATEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to VAULTINSTRUCTIONREQUIRED type case.
  *
  * This is VAULT_INSTRUCTION_REQUIRED case.
  */
  export function isVAULTINSTRUCTIONREQUIRED(value: unknown): value is VAULTINSTRUCTIONREQUIRED {
    const validationResult = validateAndMap(value, vAULTINSTRUCTIONREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISMATCHEDVAULTIDTOPAYMENTSOURCE type case.
  *
  * This is MISMATCHED_VAULT_ID_TO_PAYMENT_SOURCE case.
  */
  export function isMISMATCHEDVAULTIDTOPAYMENTSOURCE(value: unknown): value is MISMATCHEDVAULTIDTOPAYMENTSOURCE {
    const validationResult = validateAndMap(value, mISMATCHEDVAULTIDTOPAYMENTSOURCESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CRYPTOGRAMREQUIRED type case.
  *
  * This is CRYPTOGRAM_REQUIRED case.
  */
  export function isCRYPTOGRAMREQUIRED(value: unknown): value is CRYPTOGRAMREQUIRED {
    const validationResult = validateAndMap(value, cRYPTOGRAMREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to EMVDATAREQUIRED type case.
  *
  * This is EMV_DATA_REQUIRED case.
  */
  export function isEMVDATAREQUIRED(value: unknown): value is EMVDATAREQUIRED {
    const validationResult = validateAndMap(value, eMVDATAREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTELIGIBLEFORPNREFPROCESSING type case.
  *
  * This is NOT_ELIGIBLE_FOR_PNREF_PROCESSING case.
  */
  export function isNOTELIGIBLEFORPNREFPROCESSING(value: unknown): value is NOTELIGIBLEFORPNREFPROCESSING {
    const validationResult = validateAndMap(value, nOTELIGIBLEFORPNREFPROCESSINGSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING type case.
  *
  * This is NOT_ELIGIBLE_FOR_PAYPAL_TRANSACTION_ID_PROCESSING case.
  */
  export function isNOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING(value: unknown): value is NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING {
    const validationResult = validateAndMap(value, nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYPALTRANSACTIONIDNOTFOUND type case.
  *
  * This is PAYPAL_TRANSACTION_ID_NOT_FOUND case.
  */
  export function isPAYPALTRANSACTIONIDNOTFOUND(value: unknown): value is PAYPALTRANSACTIONIDNOTFOUND {
    const validationResult = validateAndMap(value, pAYPALTRANSACTIONIDNOTFOUNDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PNREFNOTFOUND type case.
  *
  * This is PNREF_NOT_FOUND case.
  */
  export function isPNREFNOTFOUND(value: unknown): value is PNREFNOTFOUND {
    const validationResult = validateAndMap(value, pNREFNOTFOUNDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDSECURITYCODELENGTH type case.
  *
  * This is INVALID_SECURITY_CODE_LENGTH case.
  */
  export function isINVALIDSECURITYCODELENGTH(value: unknown): value is INVALIDSECURITYCODELENGTH {
    const validationResult = validateAndMap(value, iNVALIDSECURITYCODELENGTHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTENABLEDTOVAULTPAYMENTSOURCE type case.
  *
  * This is NOT_ENABLED_TO_VAULT_PAYMENT_SOURCE case.
  */
  export function isNOTENABLEDTOVAULTPAYMENTSOURCE(value: unknown): value is NOTENABLEDTOVAULTPAYMENTSOURCE {
    const validationResult = validateAndMap(value, nOTENABLEDTOVAULTPAYMENTSOURCESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT type case.
  *
  * This is REQUIRED_PARAMETER_FOR_CUSTOMER_INITIATED_PAYMENT case.
  */
  export function isREQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT(value: unknown): value is REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT {
    const validationResult = validateAndMap(value, rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TOKENEXPIRED type case.
  *
  * This is TOKEN_EXPIRED case.
  */
  export function isTOKENEXPIRED(value: unknown): value is TOKENEXPIRED {
    const validationResult = validateAndMap(value, tOKENEXPIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDGOOGLEPAYTOKEN type case.
  *
  * This is INVALID_GOOGLE_PAY_TOKEN case.
  */
  export function isINVALIDGOOGLEPAYTOKEN(value: unknown): value is INVALIDGOOGLEPAYTOKEN {
    const validationResult = validateAndMap(value, iNVALIDGOOGLEPAYTOKENSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to GOOGLEPAYGATEWAYMERCHANTIDMISMATCH type case.
  *
  * This is GOOGLE_PAY_GATEWAY_MERCHANT_ID_MISMATCH case.
  */
  export function isGOOGLEPAYGATEWAYMERCHANTIDMISMATCH(value: unknown): value is GOOGLEPAYGATEWAYMERCHANTIDMISMATCH {
    const validationResult = validateAndMap(value, gOOGLEPAYGATEWAYMERCHANTIDMISMATCHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ONEOFPARAMETERSREQUIRED type case.
  *
  * This is ONE_OF_PARAMETERS_REQUIRED case.
  */
  export function isONEOFPARAMETERSREQUIRED(value: unknown): value is ONEOFPARAMETERSREQUIRED {
    const validationResult = validateAndMap(value, oNEOFPARAMETERSREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ALIASDECLINEDBYPROCESSOR type case.
  *
  * This is ALIAS_DECLINED_BY_PROCESSOR case.
  */
  export function isALIASDECLINEDBYPROCESSOR(value: unknown): value is ALIASDECLINEDBYPROCESSOR {
    const validationResult = validateAndMap(value, aLIASDECLINEDBYPROCESSORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to BLIKONECLICKMISSINGREQUIREDPARAMETER type case.
  *
  * This is BLIK_ONE_CLICK_MISSING_REQUIRED_PARAMETER case.
  */
  export function isBLIKONECLICKMISSINGREQUIREDPARAMETER(value: unknown): value is BLIKONECLICKMISSINGREQUIREDPARAMETER {
    const validationResult = validateAndMap(value, bLIKONECLICKMISSINGREQUIREDPARAMETERSchema);
    return validationResult.errors === false;
  }
}
