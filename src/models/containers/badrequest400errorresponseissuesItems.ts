/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import {
  INVALIDPARAMETERSYNTAXPayments,
  iNVALIDPARAMETERSYNTAXPaymentsSchema,
} from '../iNVALIDPARAMETERSYNTAXPayments';
import {
  INVALIDPARAMETERVALUEPayments,
  iNVALIDPARAMETERVALUEPaymentsSchema,
} from '../iNVALIDPARAMETERVALUEPayments';
import {
  INVALIDSTRINGLENGTHPayments,
  iNVALIDSTRINGLENGTHPaymentsSchema,
} from '../iNVALIDSTRINGLENGTHPayments';
import {
  INVALIDSTRINGMAXLENGTH,
  iNVALIDSTRINGMAXLENGTHSchema,
} from '../iNVALIDSTRINGMAXLENGTH';
import {
  MISSINGREQUIREDPARAMETERPayments,
  mISSINGREQUIREDPARAMETERPaymentsSchema,
} from '../mISSINGREQUIREDPARAMETERPayments';

/** This is a container type for any-of types. */
export type Badrequest400errorresponseissuesItems = INVALIDPARAMETERVALUEPayments | MISSINGREQUIREDPARAMETERPayments | INVALIDSTRINGLENGTHPayments | INVALIDSTRINGMAXLENGTH | INVALIDPARAMETERSYNTAXPayments;

export const badrequest400errorresponseissuesItemsSchema: Schema<Badrequest400errorresponseissuesItems> = anyOf(
  [
    iNVALIDPARAMETERVALUEPaymentsSchema,
    mISSINGREQUIREDPARAMETERPaymentsSchema,
    iNVALIDSTRINGLENGTHPaymentsSchema,
    iNVALIDSTRINGMAXLENGTHSchema,
    iNVALIDPARAMETERSYNTAXPaymentsSchema,
  ]
);

export namespace Badrequest400errorresponseissuesItems {
  /**
  * Validation method to narrow down union type to INVALIDPARAMETERVALUEPayments type case.
  *
  * This is INVALID_PARAMETER_VALUE_Payments case.
  */
  export function isINVALIDPARAMETERVALUEPayments(value: unknown): value is INVALIDPARAMETERVALUEPayments {
    const validationResult = validateAndMap(value, iNVALIDPARAMETERVALUEPaymentsSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISSINGREQUIREDPARAMETERPayments type case.
  *
  * This is MISSING_REQUIRED_PARAMETER_Payments case.
  */
  export function isMISSINGREQUIREDPARAMETERPayments(value: unknown): value is MISSINGREQUIREDPARAMETERPayments {
    const validationResult = validateAndMap(value, mISSINGREQUIREDPARAMETERPaymentsSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDSTRINGLENGTHPayments type case.
  *
  * This is INVALID_STRING_LENGTH_Payments case.
  */
  export function isINVALIDSTRINGLENGTHPayments(value: unknown): value is INVALIDSTRINGLENGTHPayments {
    const validationResult = validateAndMap(value, iNVALIDSTRINGLENGTHPaymentsSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDSTRINGMAXLENGTH type case.
  *
  * This is INVALID_STRING_MAX_LENGTH case.
  */
  export function isINVALIDSTRINGMAXLENGTH(value: unknown): value is INVALIDSTRINGMAXLENGTH {
    const validationResult = validateAndMap(value, iNVALIDSTRINGMAXLENGTHSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDPARAMETERSYNTAXPayments type case.
  *
  * This is INVALID_PARAMETER_SYNTAX_Payments case.
  */
  export function isINVALIDPARAMETERSYNTAXPayments(value: unknown): value is INVALIDPARAMETERSYNTAXPayments {
    const validationResult = validateAndMap(value, iNVALIDPARAMETERSYNTAXPaymentsSchema);
    return validationResult.errors === false;
  }
}
