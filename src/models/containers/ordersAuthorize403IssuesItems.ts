/**
 * Paypal Merged APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import {
  NOTELIGIBLEFORTOKENPROCESSING,
  nOTELIGIBLEFORTOKENPROCESSINGSchema,
} from '../nOTELIGIBLEFORTOKENPROCESSING';
import {
  PERMISSIONDENIEDERROR,
  pERMISSIONDENIEDERRORSchema,
} from '../pERMISSIONDENIEDERROR';
import {
  PERMISSIONDENIEDFORDONATIONITEMS,
  pERMISSIONDENIEDFORDONATIONITEMSSchema,
} from '../pERMISSIONDENIEDFORDONATIONITEMS';

/** This is a container type for any-of types. */
export type OrdersAuthorize403IssuesItems = NOTELIGIBLEFORTOKENPROCESSING | PERMISSIONDENIEDERROR | PERMISSIONDENIEDFORDONATIONITEMS;

export const ordersAuthorize403IssuesItemsSchema: Schema<OrdersAuthorize403IssuesItems> = anyOf(
  [
    nOTELIGIBLEFORTOKENPROCESSINGSchema,
    pERMISSIONDENIEDERRORSchema,
    pERMISSIONDENIEDFORDONATIONITEMSSchema,
  ]
);

export namespace OrdersAuthorize403IssuesItems {
  /**
  * Validation method to narrow down union type to NOTELIGIBLEFORTOKENPROCESSING type case.
  *
  * This is NOT_ELIGIBLE_FOR_TOKEN_PROCESSING case.
  */
  export function isNOTELIGIBLEFORTOKENPROCESSING(value: unknown): value is NOTELIGIBLEFORTOKENPROCESSING {
    const validationResult = validateAndMap(value, nOTELIGIBLEFORTOKENPROCESSINGSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PERMISSIONDENIEDERROR type case.
  *
  * This is PERMISSION_DENIED_ERROR case.
  */
  export function isPERMISSIONDENIEDERROR(value: unknown): value is PERMISSIONDENIEDERROR {
    const validationResult = validateAndMap(value, pERMISSIONDENIEDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PERMISSIONDENIEDFORDONATIONITEMS type case.
  *
  * This is PERMISSION_DENIED_FOR_DONATION_ITEMS case.
  */
  export function isPERMISSIONDENIEDFORDONATIONITEMS(value: unknown): value is PERMISSIONDENIEDFORDONATIONITEMS {
    const validationResult = validateAndMap(value, pERMISSIONDENIEDFORDONATIONITEMSSchema);
    return validationResult.errors === false;
  }
}
