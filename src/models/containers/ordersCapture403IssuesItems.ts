/**
 * Paypal Merged APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import { CONSENTNEEDED, cONSENTNEEDEDSchema } from '../cONSENTNEEDED';
import {
  NOTELIGIBLEFORTOKENPROCESSINGERROR,
  nOTELIGIBLEFORTOKENPROCESSINGERRORSchema,
} from '../nOTELIGIBLEFORTOKENPROCESSINGERROR';
import {
  PERMISSIONDENIEDFORDONATIONITEMSERROR,
  pERMISSIONDENIEDFORDONATIONITEMSERRORSchema,
} from '../pERMISSIONDENIEDFORDONATIONITEMSERROR';
import {
  PERMISSIONDENIEDRESULT,
  pERMISSIONDENIEDRESULTSchema,
} from '../pERMISSIONDENIEDRESULT';

/** This is a container type for any-of types. */
export type OrdersCapture403IssuesItems = CONSENTNEEDED | NOTELIGIBLEFORTOKENPROCESSINGERROR | PERMISSIONDENIEDRESULT | PERMISSIONDENIEDFORDONATIONITEMSERROR;

export const ordersCapture403IssuesItemsSchema: Schema<OrdersCapture403IssuesItems> = anyOf(
  [
    cONSENTNEEDEDSchema,
    nOTELIGIBLEFORTOKENPROCESSINGERRORSchema,
    pERMISSIONDENIEDRESULTSchema,
    pERMISSIONDENIEDFORDONATIONITEMSERRORSchema,
  ]
);

export namespace OrdersCapture403IssuesItems {
  /**
  * Validation method to narrow down union type to CONSENTNEEDED type case.
  *
  * This is CONSENT_NEEDED case.
  */
  export function isCONSENTNEEDED(value: unknown): value is CONSENTNEEDED {
    const validationResult = validateAndMap(value, cONSENTNEEDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTELIGIBLEFORTOKENPROCESSINGERROR type case.
  *
  * This is NOT_ELIGIBLE_FOR_TOKEN_PROCESSING_ERROR case.
  */
  export function isNOTELIGIBLEFORTOKENPROCESSINGERROR(value: unknown): value is NOTELIGIBLEFORTOKENPROCESSINGERROR {
    const validationResult = validateAndMap(value, nOTELIGIBLEFORTOKENPROCESSINGERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PERMISSIONDENIEDRESULT type case.
  *
  * This is PERMISSION_DENIED_RESULT case.
  */
  export function isPERMISSIONDENIEDRESULT(value: unknown): value is PERMISSIONDENIEDRESULT {
    const validationResult = validateAndMap(value, pERMISSIONDENIEDRESULTSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PERMISSIONDENIEDFORDONATIONITEMSERROR type case.
  *
  * This is PERMISSION_DENIED_FOR_DONATION_ITEMS_ERROR case.
  */
  export function isPERMISSIONDENIEDFORDONATIONITEMSERROR(value: unknown): value is PERMISSIONDENIEDFORDONATIONITEMSERROR {
    const validationResult = validateAndMap(value, pERMISSIONDENIEDFORDONATIONITEMSERRORSchema);
    return validationResult.errors === false;
  }
}
