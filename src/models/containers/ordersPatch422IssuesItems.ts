/**
 * Paypal Merged APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import {
  AMOUNTCHANGENOTALLOWED,
  aMOUNTCHANGENOTALLOWEDSchema,
} from '../aMOUNTCHANGENOTALLOWED';
import { AmountMismatch1, amountMismatch1Schema } from '../amountMismatch1';
import {
  CannotBeNegative1,
  cannotBeNegative1Schema,
} from '../cannotBeNegative1';
import {
  CannotBeZeroOrNegative1,
  cannotBeZeroOrNegative1Schema,
} from '../cannotBeZeroOrNegative1';
import { CityRequired1, cityRequired1Schema } from '../cityRequired1';
import {
  DecimalPrecision1,
  decimalPrecision1Schema,
} from '../decimalPrecision1';
import {
  DonationItemsNotSupported1,
  donationItemsNotSupported1Schema,
} from '../donationItemsNotSupported1';
import {
  DuplicateReferenceID1,
  duplicateReferenceID1Schema,
} from '../duplicateReferenceID1';
import {
  InvalidCurrencyCode1,
  invalidCurrencyCode1Schema,
} from '../invalidCurrencyCode1';
import { InvalidFXRateID1, invalidFXRateID1Schema } from '../invalidFXRateID1';
import {
  INVALIDJSONPOINTERFORMAT,
  iNVALIDJSONPOINTERFORMATSchema,
} from '../iNVALIDJSONPOINTERFORMAT';
import { INVALIDPARAMETER, iNVALIDPARAMETERSchema } from '../iNVALIDPARAMETER';
import {
  InvalidPlatformFeesAccountError,
  invalidPlatformFeesAccountErrorSchema,
} from '../invalidPlatformFeesAccountError';
import {
  InvalidPlatformFeesAmount1,
  invalidPlatformFeesAmount1Schema,
} from '../invalidPlatformFeesAmount1';
import {
  ItemTotalMismatch1,
  itemTotalMismatch1Schema,
} from '../itemTotalMismatch1';
import {
  ItemTotalRequired1,
  itemTotalRequired1Schema,
} from '../itemTotalRequired1';
import {
  MaxValueExceeded1,
  maxValueExceeded1Schema,
} from '../maxValueExceeded1';
import {
  MultiCurrencyOrder1,
  multiCurrencyOrder1Schema,
} from '../multiCurrencyOrder1';
import {
  MultipleShippingOptionSelected1,
  multipleShippingOptionSelected1Schema,
} from '../multipleShippingOptionSelected1';
import { NOTPATCHABLE, nOTPATCHABLESchema } from '../nOTPATCHABLE';
import {
  ORDERALREADYCOMPLETED,
  oRDERALREADYCOMPLETEDSchema,
} from '../oRDERALREADYCOMPLETED';
import {
  PATCHPATHREQUIRED,
  pATCHPATHREQUIREDSchema,
} from '../pATCHPATHREQUIRED';
import {
  PATCHVALUEREQUIRED,
  pATCHVALUEREQUIREDSchema,
} from '../pATCHVALUEREQUIRED';
import {
  PayeeAccountLockedOrClosed1,
  payeeAccountLockedOrClosed1Schema,
} from '../payeeAccountLockedOrClosed1';
import {
  PayeeAccountRestricted1,
  payeeAccountRestricted1Schema,
} from '../payeeAccountRestricted1';
import {
  PayeeFXRateIDCurrencyMismatch1,
  payeeFXRateIDCurrencyMismatch1Schema,
} from '../payeeFXRateIDCurrencyMismatch1';
import {
  PayeeFXRateIDExpired1,
  payeeFXRateIDExpired1Schema,
} from '../payeeFXRateIDExpired1';
import {
  PlatformFeesNotSupported1,
  platformFeesNotSupported1Schema,
} from '../platformFeesNotSupported1';
import {
  PostalCodeRequired1,
  postalCodeRequired1Schema,
} from '../postalCodeRequired1';
import {
  PreferredShippingOptionAmountMismatch1,
  preferredShippingOptionAmountMismatch1Schema,
} from '../preferredShippingOptionAmountMismatch1';
import {
  REFERENCEIDNOTFOUND,
  rEFERENCEIDNOTFOUNDSchema,
} from '../rEFERENCEIDNOTFOUND';
import {
  ReferenceIDRequired1,
  referenceIDRequired1Schema,
} from '../referenceIDRequired1';
import {
  ShippingOptionNotSelected1,
  shippingOptionNotSelected1Schema,
} from '../shippingOptionNotSelected1';
import {
  SHIPPINGOPTIONSNOTSUPPORTED,
  sHIPPINGOPTIONSNOTSUPPORTEDSchema,
} from '../sHIPPINGOPTIONSNOTSUPPORTED';
import {
  TaxTotalMismatch1,
  taxTotalMismatch1Schema,
} from '../taxTotalMismatch1';
import {
  TaxTotalRequired1,
  taxTotalRequired1Schema,
} from '../taxTotalRequired1';
import {
  UnsupportedIntent1,
  unsupportedIntent1Schema,
} from '../unsupportedIntent1';
import {
  UNSUPPORTEDPATCHPARAMETERVALUE,
  uNSUPPORTEDPATCHPARAMETERVALUESchema,
} from '../uNSUPPORTEDPATCHPARAMETERVALUE';

/** This is a container type for any-of types. */
export type OrdersPatch422IssuesItems = AmountMismatch1 | CannotBeNegative1 | CannotBeZeroOrNegative1 | CityRequired1 | DecimalPrecision1 | DonationItemsNotSupported1 | DuplicateReferenceID1 | InvalidCurrencyCode1 | ItemTotalMismatch1 | ItemTotalRequired1 | MaxValueExceeded1 | INVALIDJSONPOINTERFORMAT | INVALIDPARAMETER | NOTPATCHABLE | TaxTotalMismatch1 | TaxTotalRequired1 | UnsupportedIntent1 | UNSUPPORTEDPATCHPARAMETERVALUE | PATCHVALUEREQUIRED | PATCHPATHREQUIRED | PayeeAccountLockedOrClosed1 | PayeeAccountRestricted1 | PayeeFXRateIDExpired1 | PayeeFXRateIDCurrencyMismatch1 | InvalidFXRateID1 | PlatformFeesNotSupported1 | InvalidPlatformFeesAccountError | InvalidPlatformFeesAmount1 | PostalCodeRequired1 | REFERENCEIDNOTFOUND | ReferenceIDRequired1 | MultiCurrencyOrder1 | ShippingOptionNotSelected1 | SHIPPINGOPTIONSNOTSUPPORTED | MultipleShippingOptionSelected1 | ORDERALREADYCOMPLETED | PreferredShippingOptionAmountMismatch1 | AMOUNTCHANGENOTALLOWED;

export const ordersPatch422IssuesItemsSchema: Schema<OrdersPatch422IssuesItems> = anyOf(
  [
    amountMismatch1Schema,
    cannotBeNegative1Schema,
    cannotBeZeroOrNegative1Schema,
    cityRequired1Schema,
    decimalPrecision1Schema,
    donationItemsNotSupported1Schema,
    duplicateReferenceID1Schema,
    invalidCurrencyCode1Schema,
    itemTotalMismatch1Schema,
    itemTotalRequired1Schema,
    maxValueExceeded1Schema,
    iNVALIDJSONPOINTERFORMATSchema,
    iNVALIDPARAMETERSchema,
    nOTPATCHABLESchema,
    taxTotalMismatch1Schema,
    taxTotalRequired1Schema,
    unsupportedIntent1Schema,
    uNSUPPORTEDPATCHPARAMETERVALUESchema,
    pATCHVALUEREQUIREDSchema,
    pATCHPATHREQUIREDSchema,
    payeeAccountLockedOrClosed1Schema,
    payeeAccountRestricted1Schema,
    payeeFXRateIDExpired1Schema,
    payeeFXRateIDCurrencyMismatch1Schema,
    invalidFXRateID1Schema,
    platformFeesNotSupported1Schema,
    invalidPlatformFeesAccountErrorSchema,
    invalidPlatformFeesAmount1Schema,
    postalCodeRequired1Schema,
    rEFERENCEIDNOTFOUNDSchema,
    referenceIDRequired1Schema,
    multiCurrencyOrder1Schema,
    shippingOptionNotSelected1Schema,
    sHIPPINGOPTIONSNOTSUPPORTEDSchema,
    multipleShippingOptionSelected1Schema,
    oRDERALREADYCOMPLETEDSchema,
    preferredShippingOptionAmountMismatch1Schema,
    aMOUNTCHANGENOTALLOWEDSchema,
  ]
);

export namespace OrdersPatch422IssuesItems {
  /**
  * Validation method to narrow down union type to AmountMismatch1 type case.
  *
  * This is Amount Mismatch1 case.
  */
  export function isAmountMismatch1(value: unknown): value is AmountMismatch1 {
    const validationResult = validateAndMap(value, amountMismatch1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CannotBeNegative1 type case.
  *
  * This is Cannot Be Negative1 case.
  */
  export function isCannotBeNegative1(value: unknown): value is CannotBeNegative1 {
    const validationResult = validateAndMap(value, cannotBeNegative1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CannotBeZeroOrNegative1 type case.
  *
  * This is Cannot Be Zero Or Negative1 case.
  */
  export function isCannotBeZeroOrNegative1(value: unknown): value is CannotBeZeroOrNegative1 {
    const validationResult = validateAndMap(value, cannotBeZeroOrNegative1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CityRequired1 type case.
  *
  * This is City Required1 case.
  */
  export function isCityRequired1(value: unknown): value is CityRequired1 {
    const validationResult = validateAndMap(value, cityRequired1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DecimalPrecision1 type case.
  *
  * This is Decimal Precision1 case.
  */
  export function isDecimalPrecision1(value: unknown): value is DecimalPrecision1 {
    const validationResult = validateAndMap(value, decimalPrecision1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DonationItemsNotSupported1 type case.
  *
  * This is Donation Items Not Supported1 case.
  */
  export function isDonationItemsNotSupported1(value: unknown): value is DonationItemsNotSupported1 {
    const validationResult = validateAndMap(value, donationItemsNotSupported1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DuplicateReferenceID1 type case.
  *
  * This is Duplicate Reference ID1 case.
  */
  export function isDuplicateReferenceID1(value: unknown): value is DuplicateReferenceID1 {
    const validationResult = validateAndMap(value, duplicateReferenceID1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to InvalidCurrencyCode1 type case.
  *
  * This is Invalid Currency Code1 case.
  */
  export function isInvalidCurrencyCode1(value: unknown): value is InvalidCurrencyCode1 {
    const validationResult = validateAndMap(value, invalidCurrencyCode1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ItemTotalMismatch1 type case.
  *
  * This is Item Total Mismatch1 case.
  */
  export function isItemTotalMismatch1(value: unknown): value is ItemTotalMismatch1 {
    const validationResult = validateAndMap(value, itemTotalMismatch1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ItemTotalRequired1 type case.
  *
  * This is Item Total Required1 case.
  */
  export function isItemTotalRequired1(value: unknown): value is ItemTotalRequired1 {
    const validationResult = validateAndMap(value, itemTotalRequired1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MaxValueExceeded1 type case.
  *
  * This is Max Value Exceeded1 case.
  */
  export function isMaxValueExceeded1(value: unknown): value is MaxValueExceeded1 {
    const validationResult = validateAndMap(value, maxValueExceeded1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDJSONPOINTERFORMAT type case.
  *
  * This is INVALID_JSON_POINTER_FORMAT case.
  */
  export function isINVALIDJSONPOINTERFORMAT(value: unknown): value is INVALIDJSONPOINTERFORMAT {
    const validationResult = validateAndMap(value, iNVALIDJSONPOINTERFORMATSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDPARAMETER type case.
  *
  * This is INVALID_PARAMETER case.
  */
  export function isINVALIDPARAMETER(value: unknown): value is INVALIDPARAMETER {
    const validationResult = validateAndMap(value, iNVALIDPARAMETERSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTPATCHABLE type case.
  *
  * This is NOT_PATCHABLE case.
  */
  export function isNOTPATCHABLE(value: unknown): value is NOTPATCHABLE {
    const validationResult = validateAndMap(value, nOTPATCHABLESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TaxTotalMismatch1 type case.
  *
  * This is Tax Total Mismatch1 case.
  */
  export function isTaxTotalMismatch1(value: unknown): value is TaxTotalMismatch1 {
    const validationResult = validateAndMap(value, taxTotalMismatch1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TaxTotalRequired1 type case.
  *
  * This is Tax Total Required1 case.
  */
  export function isTaxTotalRequired1(value: unknown): value is TaxTotalRequired1 {
    const validationResult = validateAndMap(value, taxTotalRequired1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to UnsupportedIntent1 type case.
  *
  * This is Unsupported Intent1 case.
  */
  export function isUnsupportedIntent1(value: unknown): value is UnsupportedIntent1 {
    const validationResult = validateAndMap(value, unsupportedIntent1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to UNSUPPORTEDPATCHPARAMETERVALUE type case.
  *
  * This is UNSUPPORTED_PATCH_PARAMETER_VALUE case.
  */
  export function isUNSUPPORTEDPATCHPARAMETERVALUE(value: unknown): value is UNSUPPORTEDPATCHPARAMETERVALUE {
    const validationResult = validateAndMap(value, uNSUPPORTEDPATCHPARAMETERVALUESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PATCHVALUEREQUIRED type case.
  *
  * This is PATCH_VALUE_REQUIRED case.
  */
  export function isPATCHVALUEREQUIRED(value: unknown): value is PATCHVALUEREQUIRED {
    const validationResult = validateAndMap(value, pATCHVALUEREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PATCHPATHREQUIRED type case.
  *
  * This is PATCH_PATH_REQUIRED case.
  */
  export function isPATCHPATHREQUIRED(value: unknown): value is PATCHPATHREQUIRED {
    const validationResult = validateAndMap(value, pATCHPATHREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PayeeAccountLockedOrClosed1 type case.
  *
  * This is Payee Account Locked Or Closed1 case.
  */
  export function isPayeeAccountLockedOrClosed1(value: unknown): value is PayeeAccountLockedOrClosed1 {
    const validationResult = validateAndMap(value, payeeAccountLockedOrClosed1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PayeeAccountRestricted1 type case.
  *
  * This is Payee Account Restricted1 case.
  */
  export function isPayeeAccountRestricted1(value: unknown): value is PayeeAccountRestricted1 {
    const validationResult = validateAndMap(value, payeeAccountRestricted1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PayeeFXRateIDExpired1 type case.
  *
  * This is Payee FX Rate ID Expired1 case.
  */
  export function isPayeeFXRateIDExpired1(value: unknown): value is PayeeFXRateIDExpired1 {
    const validationResult = validateAndMap(value, payeeFXRateIDExpired1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PayeeFXRateIDCurrencyMismatch1 type case.
  *
  * This is Payee FX Rate ID Currency Mismatch1 case.
  */
  export function isPayeeFXRateIDCurrencyMismatch1(value: unknown): value is PayeeFXRateIDCurrencyMismatch1 {
    const validationResult = validateAndMap(value, payeeFXRateIDCurrencyMismatch1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to InvalidFXRateID1 type case.
  *
  * This is Invalid FX Rate ID1 case.
  */
  export function isInvalidFXRateID1(value: unknown): value is InvalidFXRateID1 {
    const validationResult = validateAndMap(value, invalidFXRateID1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PlatformFeesNotSupported1 type case.
  *
  * This is Platform Fees Not Supported1 case.
  */
  export function isPlatformFeesNotSupported1(value: unknown): value is PlatformFeesNotSupported1 {
    const validationResult = validateAndMap(value, platformFeesNotSupported1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to InvalidPlatformFeesAccountError type case.
  *
  * This is Invalid Platform Fees Account Error case.
  */
  export function isInvalidPlatformFeesAccountError(value: unknown): value is InvalidPlatformFeesAccountError {
    const validationResult = validateAndMap(value, invalidPlatformFeesAccountErrorSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to InvalidPlatformFeesAmount1 type case.
  *
  * This is Invalid Platform Fees Amount1 case.
  */
  export function isInvalidPlatformFeesAmount1(value: unknown): value is InvalidPlatformFeesAmount1 {
    const validationResult = validateAndMap(value, invalidPlatformFeesAmount1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PostalCodeRequired1 type case.
  *
  * This is Postal Code Required1 case.
  */
  export function isPostalCodeRequired1(value: unknown): value is PostalCodeRequired1 {
    const validationResult = validateAndMap(value, postalCodeRequired1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REFERENCEIDNOTFOUND type case.
  *
  * This is REFERENCE_ID_NOT_FOUND case.
  */
  export function isREFERENCEIDNOTFOUND(value: unknown): value is REFERENCEIDNOTFOUND {
    const validationResult = validateAndMap(value, rEFERENCEIDNOTFOUNDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ReferenceIDRequired1 type case.
  *
  * This is Reference ID Required1 case.
  */
  export function isReferenceIDRequired1(value: unknown): value is ReferenceIDRequired1 {
    const validationResult = validateAndMap(value, referenceIDRequired1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MultiCurrencyOrder1 type case.
  *
  * This is Multi-Currency Order1 case.
  */
  export function isMultiCurrencyOrder1(value: unknown): value is MultiCurrencyOrder1 {
    const validationResult = validateAndMap(value, multiCurrencyOrder1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ShippingOptionNotSelected1 type case.
  *
  * This is Shipping Option Not Selected1 case.
  */
  export function isShippingOptionNotSelected1(value: unknown): value is ShippingOptionNotSelected1 {
    const validationResult = validateAndMap(value, shippingOptionNotSelected1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SHIPPINGOPTIONSNOTSUPPORTED type case.
  *
  * This is SHIPPING_OPTIONS_NOT_SUPPORTED case.
  */
  export function isSHIPPINGOPTIONSNOTSUPPORTED(value: unknown): value is SHIPPINGOPTIONSNOTSUPPORTED {
    const validationResult = validateAndMap(value, sHIPPINGOPTIONSNOTSUPPORTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MultipleShippingOptionSelected1 type case.
  *
  * This is Multiple Shipping Option Selected1 case.
  */
  export function isMultipleShippingOptionSelected1(value: unknown): value is MultipleShippingOptionSelected1 {
    const validationResult = validateAndMap(value, multipleShippingOptionSelected1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ORDERALREADYCOMPLETED type case.
  *
  * This is ORDER_ALREADY_COMPLETED case.
  */
  export function isORDERALREADYCOMPLETED(value: unknown): value is ORDERALREADYCOMPLETED {
    const validationResult = validateAndMap(value, oRDERALREADYCOMPLETEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PreferredShippingOptionAmountMismatch1 type case.
  *
  * This is Preferred Shipping Option Amount Mismatch1 case.
  */
  export function isPreferredShippingOptionAmountMismatch1(value: unknown): value is PreferredShippingOptionAmountMismatch1 {
    const validationResult = validateAndMap(value, preferredShippingOptionAmountMismatch1Schema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to AMOUNTCHANGENOTALLOWED type case.
  *
  * This is AMOUNT_CHANGE_NOT_ALLOWED case.
  */
  export function isAMOUNTCHANGENOTALLOWED(value: unknown): value is AMOUNTCHANGENOTALLOWED {
    const validationResult = validateAndMap(value, aMOUNTCHANGENOTALLOWEDSchema);
    return validationResult.errors === false;
  }
}
