/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import {
  ALIASDECLINEDBYPROCESSORERROR,
  aLIASDECLINEDBYPROCESSORERRORSchema,
} from '../aLIASDECLINEDBYPROCESSORERROR';
import {
  APPLEPAYAMOUNTMISMATCHERROR,
  aPPLEPAYAMOUNTMISMATCHERRORSchema,
} from '../aPPLEPAYAMOUNTMISMATCHERROR';
import {
  BANKNOTSUPPORTEDFORVERIFICATION,
  bANKNOTSUPPORTEDFORVERIFICATIONSchema,
} from '../bANKNOTSUPPORTEDFORVERIFICATION';
import {
  BILLINGADDRESSINVALIDERROR,
  bILLINGADDRESSINVALIDERRORSchema,
} from '../bILLINGADDRESSINVALIDERROR';
import {
  BLIKONECLICKMISSINGREQUIREDPARAMETERERROR,
  bLIKONECLICKMISSINGREQUIREDPARAMETERERRORSchema,
} from '../bLIKONECLICKMISSINGREQUIREDPARAMETERERROR';
import {
  CANCELURLREQUIRED,
  cANCELURLREQUIREDSchema,
} from '../cANCELURLREQUIRED';
import { CARDEXPIREDERROR, cARDEXPIREDERRORSchema } from '../cARDEXPIREDERROR';
import {
  CARDEXPIRYREQUIRED,
  cARDEXPIRYREQUIREDSchema,
} from '../cARDEXPIRYREQUIRED';
import {
  CARDNUMBERREQUIRED,
  cARDNUMBERREQUIREDSchema,
} from '../cARDNUMBERREQUIRED';
import {
  CARDTYPENOTSUPPORTED,
  cARDTYPENOTSUPPORTEDSchema,
} from '../cARDTYPENOTSUPPORTED';
import {
  COUNTRYNOTSUPPORTEDBYPAYMENTSOURCE,
  cOUNTRYNOTSUPPORTEDBYPAYMENTSOURCESchema,
} from '../cOUNTRYNOTSUPPORTEDBYPAYMENTSOURCE';
import {
  CRYPTOGRAMISREQUIRED,
  cRYPTOGRAMISREQUIREDSchema,
} from '../cRYPTOGRAMISREQUIRED';
import {
  CRYPTOGRAMREQUIREDERROR,
  cRYPTOGRAMREQUIREDERRORSchema,
} from '../cRYPTOGRAMREQUIREDERROR';
import {
  CURRENCYNOTSUPPORTEDFORBANK,
  cURRENCYNOTSUPPORTEDFORBANKSchema,
} from '../cURRENCYNOTSUPPORTEDFORBANK';
import {
  CURRENCYNOTSUPPORTEDFORCARDTYPE,
  cURRENCYNOTSUPPORTEDFORCARDTYPESchema,
} from '../cURRENCYNOTSUPPORTEDFORCARDTYPE';
import {
  CURRENCYNOTSUPPORTEDFORCOUNTRY,
  cURRENCYNOTSUPPORTEDFORCOUNTRYSchema,
} from '../cURRENCYNOTSUPPORTEDFORCOUNTRY';
import {
  DEVICEDATANOTAVAILABLE,
  dEVICEDATANOTAVAILABLESchema,
} from '../dEVICEDATANOTAVAILABLE';
import {
  EMVDATAREQUIREDERROR,
  eMVDATAREQUIREDERRORSchema,
} from '../eMVDATAREQUIREDERROR';
import {
  GOOGLEPAYGATEWAYMERCHANTIDMISMATCHERROR,
  gOOGLEPAYGATEWAYMERCHANTIDMISMATCHERRORSchema,
} from '../gOOGLEPAYGATEWAYMERCHANTIDMISMATCHERROR';
import {
  IBANCOUNTRYNOTSUPPORTED,
  iBANCOUNTRYNOTSUPPORTEDSchema,
} from '../iBANCOUNTRYNOTSUPPORTED';
import {
  INCOMPATIBLEPARAMETERVALUEERROR,
  iNCOMPATIBLEPARAMETERVALUEERRORSchema,
} from '../iNCOMPATIBLEPARAMETERVALUEERROR';
import {
  INVALIDEXPIRYDATEERROR,
  iNVALIDEXPIRYDATEERRORSchema,
} from '../iNVALIDEXPIRYDATEERROR';
import {
  INVALIDGOOGLEPAYTOKENERROR,
  iNVALIDGOOGLEPAYTOKENERRORSchema,
} from '../iNVALIDGOOGLEPAYTOKENERROR';
import { INVALIDIBAN, iNVALIDIBANSchema } from '../iNVALIDIBAN';
import {
  INVALIDSECURITYCODELENGTHERROR,
  iNVALIDSECURITYCODELENGTHERRORSchema,
} from '../iNVALIDSECURITYCODELENGTHERROR';
import {
  ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCE,
  iTEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCESchema,
} from '../iTEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCE';
import {
  MISMATCHEDVAULTIDTOPAYMENTSOURCEERROR,
  mISMATCHEDVAULTIDTOPAYMENTSOURCEERRORSchema,
} from '../mISMATCHEDVAULTIDTOPAYMENTSOURCEERROR';
import {
  MISSINGCRYPTOGRAMERROR,
  mISSINGCRYPTOGRAMERRORSchema,
} from '../mISSINGCRYPTOGRAMERROR';
import {
  MISSINGPAYMENTPARAMERROR,
  mISSINGPAYMENTPARAMERRORSchema,
} from '../mISSINGPAYMENTPARAMERROR';
import {
  MISSINGPREVIOUSREFERENCEERROR,
  mISSINGPREVIOUSREFERENCEERRORSchema,
} from '../mISSINGPREVIOUSREFERENCEERROR';
import {
  NOPAYMENTSOURCEPROVIDED,
  nOPAYMENTSOURCEPROVIDEDSchema,
} from '../nOPAYMENTSOURCEPROVIDED';
import {
  NOTELIGIBLEFORPNREFPROCESSINGERROR,
  nOTELIGIBLEFORPNREFPROCESSINGERRORSchema,
} from '../nOTELIGIBLEFORPNREFPROCESSINGERROR';
import {
  NOTENABLEDTOVAULTPAYMENTSOURCEERROR,
  nOTENABLEDTOVAULTPAYMENTSOURCEERRORSchema,
} from '../nOTENABLEDTOVAULTPAYMENTSOURCEERROR';
import {
  ONEOFPARAMETERSREQUIREDERROR,
  oNEOFPARAMETERSREQUIREDERRORSchema,
} from '../oNEOFPARAMETERSREQUIREDERROR';
import {
  ONEOFTHEPARAMETERSREQUIRED,
  oNEOFTHEPARAMETERSREQUIREDSchema,
} from '../oNEOFTHEPARAMETERSREQUIRED';
import {
  ONLYONEBANKSOURCEALLOWED,
  oNLYONEBANKSOURCEALLOWEDSchema,
} from '../oNLYONEBANKSOURCEALLOWED';
import {
  ONLYONEPAYMENTSOURCEALLOWED,
  oNLYONEPAYMENTSOURCEALLOWEDSchema,
} from '../oNLYONEPAYMENTSOURCEALLOWED';
import {
  ORDERALREADYAUTHORIZED,
  oRDERALREADYAUTHORIZEDSchema,
} from '../oRDERALREADYAUTHORIZED';
import {
  ORDERALREADYCAPTURED,
  oRDERALREADYCAPTUREDSchema,
} from '../oRDERALREADYCAPTURED';
import {
  ORDERCANNOTBECONFIRMED,
  oRDERCANNOTBECONFIRMEDSchema,
} from '../oRDERCANNOTBECONFIRMED';
import {
  ORDERCOMPLETEONPAYMENTAPPROVALERROR,
  oRDERCOMPLETEONPAYMENTAPPROVALERRORSchema,
} from '../oRDERCOMPLETEONPAYMENTAPPROVALERROR';
import {
  ORDERISPENDINGAPPROVAL,
  oRDERISPENDINGAPPROVALSchema,
} from '../oRDERISPENDINGAPPROVAL';
import {
  PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCE,
  pAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCESchema,
} from '../pAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCE';
import {
  PAYMENTALREADYAPPROVED,
  pAYMENTALREADYAPPROVEDSchema,
} from '../pAYMENTALREADYAPPROVED';
import {
  PAYMENTSOURCECANNOTBEUSEDERROR,
  pAYMENTSOURCECANNOTBEUSEDERRORSchema,
} from '../pAYMENTSOURCECANNOTBEUSEDERROR';
import {
  PAYMENTSOURCEDECLINEDBYPROCESSORERROR,
  pAYMENTSOURCEDECLINEDBYPROCESSORERRORSchema,
} from '../pAYMENTSOURCEDECLINEDBYPROCESSORERROR';
import {
  PAYMENTSOURCEINFOCANNOTBEVERIFIEDERROR,
  pAYMENTSOURCEINFOCANNOTBEVERIFIEDERRORSchema,
} from '../pAYMENTSOURCEINFOCANNOTBEVERIFIEDERROR';
import {
  PAYPALIDPROCESSINGINELIGIBILITYERROR,
  pAYPALIDPROCESSINGINELIGIBILITYERRORSchema,
} from '../pAYPALIDPROCESSINGINELIGIBILITYERROR';
import {
  PAYPALTRANSACTIONIDNOTFOUNDERROR,
  pAYPALTRANSACTIONIDNOTFOUNDERRORSchema,
} from '../pAYPALTRANSACTIONIDNOTFOUNDERROR';
import {
  PNREFNOTFOUNDERROR,
  pNREFNOTFOUNDERRORSchema,
} from '../pNREFNOTFOUNDERROR';
import {
  REQUIREDPARAMETERFORPAYMENTSOURCE,
  rEQUIREDPARAMETERFORPAYMENTSOURCESchema,
} from '../rEQUIREDPARAMETERFORPAYMENTSOURCE';
import {
  RETURNURLREQUIRED,
  rETURNURLREQUIREDSchema,
} from '../rETURNURLREQUIRED';
import {
  SETUPERRORFORBANK,
  sETUPERRORFORBANKSchema,
} from '../sETUPERRORFORBANK';
import {
  SHIPPINGADDRESSINVALIDERROR,
  sHIPPINGADDRESSINVALIDERRORSchema,
} from '../sHIPPINGADDRESSINVALIDERROR';
import {
  TOKENEXPIREDERROR,
  tOKENEXPIREDERRORSchema,
} from '../tOKENEXPIREDERROR';
import {
  UNSUPPORTEDPROCESSINGINSTRUCTIONERROR,
  uNSUPPORTEDPROCESSINGINSTRUCTIONERRORSchema,
} from '../uNSUPPORTEDPROCESSINGINSTRUCTIONERROR';
import {
  VAULTINSTRUCTIONDUPLICATEDERROR,
  vAULTINSTRUCTIONDUPLICATEDERRORSchema,
} from '../vAULTINSTRUCTIONDUPLICATEDERROR';
import {
  VAULTINSTRUCTIONREQUIREDERROR,
  vAULTINSTRUCTIONREQUIREDERRORSchema,
} from '../vAULTINSTRUCTIONREQUIREDERROR';

/** This is a container type for any-of types. */
export type OrdersConfirm422IssuesItems = ORDERALREADYCAPTURED | ORDERALREADYAUTHORIZED | ORDERCANNOTBECONFIRMED | MISSINGPREVIOUSREFERENCEERROR | MISSINGCRYPTOGRAMERROR | CURRENCYNOTSUPPORTEDFORCOUNTRY | CARDEXPIREDERROR | CARDTYPENOTSUPPORTED | CURRENCYNOTSUPPORTEDFORCARDTYPE | ONLYONEPAYMENTSOURCEALLOWED | NOPAYMENTSOURCEPROVIDED | PAYMENTALREADYAPPROVED | UNSUPPORTEDPROCESSINGINSTRUCTIONERROR | ORDERCOMPLETEONPAYMENTAPPROVALERROR | INVALIDEXPIRYDATEERROR | TOKENEXPIREDERROR | INVALIDGOOGLEPAYTOKENERROR | GOOGLEPAYGATEWAYMERCHANTIDMISMATCHERROR | CRYPTOGRAMREQUIREDERROR | ONEOFPARAMETERSREQUIREDERROR | RETURNURLREQUIRED | CANCELURLREQUIRED | COUNTRYNOTSUPPORTEDBYPAYMENTSOURCE | REQUIREDPARAMETERFORPAYMENTSOURCE | MISSINGPAYMENTPARAMERROR | ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCE | PAYMENTSOURCEINFOCANNOTBEVERIFIEDERROR | PAYMENTSOURCEDECLINEDBYPROCESSORERROR | PAYMENTSOURCECANNOTBEUSEDERROR | SETUPERRORFORBANK | BANKNOTSUPPORTEDFORVERIFICATION | APPLEPAYAMOUNTMISMATCHERROR | ONEOFTHEPARAMETERSREQUIRED | BILLINGADDRESSINVALIDERROR | SHIPPINGADDRESSINVALIDERROR | ORDERISPENDINGAPPROVAL | DEVICEDATANOTAVAILABLE | CURRENCYNOTSUPPORTEDFORBANK | ONLYONEBANKSOURCEALLOWED | INVALIDIBAN | IBANCOUNTRYNOTSUPPORTED | PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCE | CARDNUMBERREQUIRED | CARDEXPIRYREQUIRED | INCOMPATIBLEPARAMETERVALUEERROR | VAULTINSTRUCTIONDUPLICATEDERROR | VAULTINSTRUCTIONREQUIREDERROR | MISMATCHEDVAULTIDTOPAYMENTSOURCEERROR | NOTELIGIBLEFORPNREFPROCESSINGERROR | PAYPALIDPROCESSINGINELIGIBILITYERROR | PAYPALTRANSACTIONIDNOTFOUNDERROR | PNREFNOTFOUNDERROR | INVALIDSECURITYCODELENGTHERROR | NOTENABLEDTOVAULTPAYMENTSOURCEERROR | CRYPTOGRAMISREQUIRED | EMVDATAREQUIREDERROR | ALIASDECLINEDBYPROCESSORERROR | BLIKONECLICKMISSINGREQUIREDPARAMETERERROR;

export const ordersConfirm422IssuesItemsSchema: Schema<OrdersConfirm422IssuesItems> = anyOf(
  [
    oRDERALREADYCAPTUREDSchema,
    oRDERALREADYAUTHORIZEDSchema,
    oRDERCANNOTBECONFIRMEDSchema,
    mISSINGPREVIOUSREFERENCEERRORSchema,
    mISSINGCRYPTOGRAMERRORSchema,
    cURRENCYNOTSUPPORTEDFORCOUNTRYSchema,
    cARDEXPIREDERRORSchema,
    cARDTYPENOTSUPPORTEDSchema,
    cURRENCYNOTSUPPORTEDFORCARDTYPESchema,
    oNLYONEPAYMENTSOURCEALLOWEDSchema,
    nOPAYMENTSOURCEPROVIDEDSchema,
    pAYMENTALREADYAPPROVEDSchema,
    uNSUPPORTEDPROCESSINGINSTRUCTIONERRORSchema,
    oRDERCOMPLETEONPAYMENTAPPROVALERRORSchema,
    iNVALIDEXPIRYDATEERRORSchema,
    tOKENEXPIREDERRORSchema,
    iNVALIDGOOGLEPAYTOKENERRORSchema,
    gOOGLEPAYGATEWAYMERCHANTIDMISMATCHERRORSchema,
    cRYPTOGRAMREQUIREDERRORSchema,
    oNEOFPARAMETERSREQUIREDERRORSchema,
    rETURNURLREQUIREDSchema,
    cANCELURLREQUIREDSchema,
    cOUNTRYNOTSUPPORTEDBYPAYMENTSOURCESchema,
    rEQUIREDPARAMETERFORPAYMENTSOURCESchema,
    mISSINGPAYMENTPARAMERRORSchema,
    iTEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCESchema,
    pAYMENTSOURCEINFOCANNOTBEVERIFIEDERRORSchema,
    pAYMENTSOURCEDECLINEDBYPROCESSORERRORSchema,
    pAYMENTSOURCECANNOTBEUSEDERRORSchema,
    sETUPERRORFORBANKSchema,
    bANKNOTSUPPORTEDFORVERIFICATIONSchema,
    aPPLEPAYAMOUNTMISMATCHERRORSchema,
    oNEOFTHEPARAMETERSREQUIREDSchema,
    bILLINGADDRESSINVALIDERRORSchema,
    sHIPPINGADDRESSINVALIDERRORSchema,
    oRDERISPENDINGAPPROVALSchema,
    dEVICEDATANOTAVAILABLESchema,
    cURRENCYNOTSUPPORTEDFORBANKSchema,
    oNLYONEBANKSOURCEALLOWEDSchema,
    iNVALIDIBANSchema,
    iBANCOUNTRYNOTSUPPORTEDSchema,
    pAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCESchema,
    cARDNUMBERREQUIREDSchema,
    cARDEXPIRYREQUIREDSchema,
    iNCOMPATIBLEPARAMETERVALUEERRORSchema,
    vAULTINSTRUCTIONDUPLICATEDERRORSchema,
    vAULTINSTRUCTIONREQUIREDERRORSchema,
    mISMATCHEDVAULTIDTOPAYMENTSOURCEERRORSchema,
    nOTELIGIBLEFORPNREFPROCESSINGERRORSchema,
    pAYPALIDPROCESSINGINELIGIBILITYERRORSchema,
    pAYPALTRANSACTIONIDNOTFOUNDERRORSchema,
    pNREFNOTFOUNDERRORSchema,
    iNVALIDSECURITYCODELENGTHERRORSchema,
    nOTENABLEDTOVAULTPAYMENTSOURCEERRORSchema,
    cRYPTOGRAMISREQUIREDSchema,
    eMVDATAREQUIREDERRORSchema,
    aLIASDECLINEDBYPROCESSORERRORSchema,
    bLIKONECLICKMISSINGREQUIREDPARAMETERERRORSchema,
  ]
);

export namespace OrdersConfirm422IssuesItems {
  /**
  * Validation method to narrow down union type to ORDERALREADYCAPTURED type case.
  *
  * This is ORDER_ALREADY_CAPTURED case.
  */
  export function isORDERALREADYCAPTURED(value: unknown): value is ORDERALREADYCAPTURED {
    const validationResult = validateAndMap(value, oRDERALREADYCAPTUREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ORDERALREADYAUTHORIZED type case.
  *
  * This is ORDER_ALREADY_AUTHORIZED case.
  */
  export function isORDERALREADYAUTHORIZED(value: unknown): value is ORDERALREADYAUTHORIZED {
    const validationResult = validateAndMap(value, oRDERALREADYAUTHORIZEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ORDERCANNOTBECONFIRMED type case.
  *
  * This is ORDER_CANNOT_BE_CONFIRMED case.
  */
  export function isORDERCANNOTBECONFIRMED(value: unknown): value is ORDERCANNOTBECONFIRMED {
    const validationResult = validateAndMap(value, oRDERCANNOTBECONFIRMEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISSINGPREVIOUSREFERENCEERROR type case.
  *
  * This is MISSING_PREVIOUS_REFERENCE_ERROR case.
  */
  export function isMISSINGPREVIOUSREFERENCEERROR(value: unknown): value is MISSINGPREVIOUSREFERENCEERROR {
    const validationResult = validateAndMap(value, mISSINGPREVIOUSREFERENCEERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISSINGCRYPTOGRAMERROR type case.
  *
  * This is MISSING_CRYPTOGRAM_ERROR case.
  */
  export function isMISSINGCRYPTOGRAMERROR(value: unknown): value is MISSINGCRYPTOGRAMERROR {
    const validationResult = validateAndMap(value, mISSINGCRYPTOGRAMERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CURRENCYNOTSUPPORTEDFORCOUNTRY type case.
  *
  * This is CURRENCY_NOT_SUPPORTED_FOR_COUNTRY case.
  */
  export function isCURRENCYNOTSUPPORTEDFORCOUNTRY(value: unknown): value is CURRENCYNOTSUPPORTEDFORCOUNTRY {
    const validationResult = validateAndMap(value, cURRENCYNOTSUPPORTEDFORCOUNTRYSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CARDEXPIREDERROR type case.
  *
  * This is CARD_EXPIRED_ERROR case.
  */
  export function isCARDEXPIREDERROR(value: unknown): value is CARDEXPIREDERROR {
    const validationResult = validateAndMap(value, cARDEXPIREDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CARDTYPENOTSUPPORTED type case.
  *
  * This is CARD_TYPE_NOT_SUPPORTED case.
  */
  export function isCARDTYPENOTSUPPORTED(value: unknown): value is CARDTYPENOTSUPPORTED {
    const validationResult = validateAndMap(value, cARDTYPENOTSUPPORTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CURRENCYNOTSUPPORTEDFORCARDTYPE type case.
  *
  * This is CURRENCY_NOT_SUPPORTED_FOR_CARD_TYPE case.
  */
  export function isCURRENCYNOTSUPPORTEDFORCARDTYPE(value: unknown): value is CURRENCYNOTSUPPORTEDFORCARDTYPE {
    const validationResult = validateAndMap(value, cURRENCYNOTSUPPORTEDFORCARDTYPESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ONLYONEPAYMENTSOURCEALLOWED type case.
  *
  * This is ONLY_ONE_PAYMENT_SOURCE_ALLOWED case.
  */
  export function isONLYONEPAYMENTSOURCEALLOWED(value: unknown): value is ONLYONEPAYMENTSOURCEALLOWED {
    const validationResult = validateAndMap(value, oNLYONEPAYMENTSOURCEALLOWEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOPAYMENTSOURCEPROVIDED type case.
  *
  * This is NO_PAYMENT_SOURCE_PROVIDED case.
  */
  export function isNOPAYMENTSOURCEPROVIDED(value: unknown): value is NOPAYMENTSOURCEPROVIDED {
    const validationResult = validateAndMap(value, nOPAYMENTSOURCEPROVIDEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYMENTALREADYAPPROVED type case.
  *
  * This is PAYMENT_ALREADY_APPROVED case.
  */
  export function isPAYMENTALREADYAPPROVED(value: unknown): value is PAYMENTALREADYAPPROVED {
    const validationResult = validateAndMap(value, pAYMENTALREADYAPPROVEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to UNSUPPORTEDPROCESSINGINSTRUCTIONERROR type case.
  *
  * This is UNSUPPORTED_PROCESSING_INSTRUCTION_ERROR case.
  */
  export function isUNSUPPORTEDPROCESSINGINSTRUCTIONERROR(value: unknown): value is UNSUPPORTEDPROCESSINGINSTRUCTIONERROR {
    const validationResult = validateAndMap(value, uNSUPPORTEDPROCESSINGINSTRUCTIONERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ORDERCOMPLETEONPAYMENTAPPROVALERROR type case.
  *
  * This is ORDER_COMPLETE_ON_PAYMENT_APPROVAL_ERROR case.
  */
  export function isORDERCOMPLETEONPAYMENTAPPROVALERROR(value: unknown): value is ORDERCOMPLETEONPAYMENTAPPROVALERROR {
    const validationResult = validateAndMap(value, oRDERCOMPLETEONPAYMENTAPPROVALERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDEXPIRYDATEERROR type case.
  *
  * This is INVALID_EXPIRY_DATE_ERROR case.
  */
  export function isINVALIDEXPIRYDATEERROR(value: unknown): value is INVALIDEXPIRYDATEERROR {
    const validationResult = validateAndMap(value, iNVALIDEXPIRYDATEERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TOKENEXPIREDERROR type case.
  *
  * This is TOKEN_EXPIRED_ERROR case.
  */
  export function isTOKENEXPIREDERROR(value: unknown): value is TOKENEXPIREDERROR {
    const validationResult = validateAndMap(value, tOKENEXPIREDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDGOOGLEPAYTOKENERROR type case.
  *
  * This is INVALID_GOOGLE_PAY_TOKEN_ERROR case.
  */
  export function isINVALIDGOOGLEPAYTOKENERROR(value: unknown): value is INVALIDGOOGLEPAYTOKENERROR {
    const validationResult = validateAndMap(value, iNVALIDGOOGLEPAYTOKENERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to GOOGLEPAYGATEWAYMERCHANTIDMISMATCHERROR type case.
  *
  * This is GOOGLE_PAY_GATEWAY_MERCHANT_ID_MISMATCH_ERROR case.
  */
  export function isGOOGLEPAYGATEWAYMERCHANTIDMISMATCHERROR(value: unknown): value is GOOGLEPAYGATEWAYMERCHANTIDMISMATCHERROR {
    const validationResult = validateAndMap(value, gOOGLEPAYGATEWAYMERCHANTIDMISMATCHERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CRYPTOGRAMREQUIREDERROR type case.
  *
  * This is CRYPTOGRAM_REQUIRED_ERROR case.
  */
  export function isCRYPTOGRAMREQUIREDERROR(value: unknown): value is CRYPTOGRAMREQUIREDERROR {
    const validationResult = validateAndMap(value, cRYPTOGRAMREQUIREDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ONEOFPARAMETERSREQUIREDERROR type case.
  *
  * This is ONE_OF_PARAMETERS_REQUIRED_ERROR case.
  */
  export function isONEOFPARAMETERSREQUIREDERROR(value: unknown): value is ONEOFPARAMETERSREQUIREDERROR {
    const validationResult = validateAndMap(value, oNEOFPARAMETERSREQUIREDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to RETURNURLREQUIRED type case.
  *
  * This is RETURN_URL_REQUIRED case.
  */
  export function isRETURNURLREQUIRED(value: unknown): value is RETURNURLREQUIRED {
    const validationResult = validateAndMap(value, rETURNURLREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CANCELURLREQUIRED type case.
  *
  * This is CANCEL_URL_REQUIRED case.
  */
  export function isCANCELURLREQUIRED(value: unknown): value is CANCELURLREQUIRED {
    const validationResult = validateAndMap(value, cANCELURLREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to COUNTRYNOTSUPPORTEDBYPAYMENTSOURCE type case.
  *
  * This is COUNTRY_NOT_SUPPORTED_BY_PAYMENT_SOURCE case.
  */
  export function isCOUNTRYNOTSUPPORTEDBYPAYMENTSOURCE(value: unknown): value is COUNTRYNOTSUPPORTEDBYPAYMENTSOURCE {
    const validationResult = validateAndMap(value, cOUNTRYNOTSUPPORTEDBYPAYMENTSOURCESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to REQUIREDPARAMETERFORPAYMENTSOURCE type case.
  *
  * This is REQUIRED_PARAMETER_FOR_PAYMENT_SOURCE case.
  */
  export function isREQUIREDPARAMETERFORPAYMENTSOURCE(value: unknown): value is REQUIREDPARAMETERFORPAYMENTSOURCE {
    const validationResult = validateAndMap(value, rEQUIREDPARAMETERFORPAYMENTSOURCESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISSINGPAYMENTPARAMERROR type case.
  *
  * This is MISSING_PAYMENT_PARAM_ERROR case.
  */
  export function isMISSINGPAYMENTPARAMERROR(value: unknown): value is MISSINGPAYMENTPARAMERROR {
    const validationResult = validateAndMap(value, mISSINGPAYMENTPARAMERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCE type case.
  *
  * This is ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE case.
  */
  export function isITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCE(value: unknown): value is ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCE {
    const validationResult = validateAndMap(value, iTEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYMENTSOURCEINFOCANNOTBEVERIFIEDERROR type case.
  *
  * This is PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED_ERROR case.
  */
  export function isPAYMENTSOURCEINFOCANNOTBEVERIFIEDERROR(value: unknown): value is PAYMENTSOURCEINFOCANNOTBEVERIFIEDERROR {
    const validationResult = validateAndMap(value, pAYMENTSOURCEINFOCANNOTBEVERIFIEDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYMENTSOURCEDECLINEDBYPROCESSORERROR type case.
  *
  * This is PAYMENT_SOURCE_DECLINED_BY_PROCESSOR_ERROR case.
  */
  export function isPAYMENTSOURCEDECLINEDBYPROCESSORERROR(value: unknown): value is PAYMENTSOURCEDECLINEDBYPROCESSORERROR {
    const validationResult = validateAndMap(value, pAYMENTSOURCEDECLINEDBYPROCESSORERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYMENTSOURCECANNOTBEUSEDERROR type case.
  *
  * This is PAYMENT_SOURCE_CANNOT_BE_USED_ERROR case.
  */
  export function isPAYMENTSOURCECANNOTBEUSEDERROR(value: unknown): value is PAYMENTSOURCECANNOTBEUSEDERROR {
    const validationResult = validateAndMap(value, pAYMENTSOURCECANNOTBEUSEDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SETUPERRORFORBANK type case.
  *
  * This is SETUP_ERROR_FOR_BANK case.
  */
  export function isSETUPERRORFORBANK(value: unknown): value is SETUPERRORFORBANK {
    const validationResult = validateAndMap(value, sETUPERRORFORBANKSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to BANKNOTSUPPORTEDFORVERIFICATION type case.
  *
  * This is BANK_NOT_SUPPORTED_FOR_VERIFICATION case.
  */
  export function isBANKNOTSUPPORTEDFORVERIFICATION(value: unknown): value is BANKNOTSUPPORTEDFORVERIFICATION {
    const validationResult = validateAndMap(value, bANKNOTSUPPORTEDFORVERIFICATIONSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to APPLEPAYAMOUNTMISMATCHERROR type case.
  *
  * This is APPLE_PAY_AMOUNT_MISMATCH_ERROR case.
  */
  export function isAPPLEPAYAMOUNTMISMATCHERROR(value: unknown): value is APPLEPAYAMOUNTMISMATCHERROR {
    const validationResult = validateAndMap(value, aPPLEPAYAMOUNTMISMATCHERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ONEOFTHEPARAMETERSREQUIRED type case.
  *
  * This is ONE_OF_THE_PARAMETERS_REQUIRED case.
  */
  export function isONEOFTHEPARAMETERSREQUIRED(value: unknown): value is ONEOFTHEPARAMETERSREQUIRED {
    const validationResult = validateAndMap(value, oNEOFTHEPARAMETERSREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to BILLINGADDRESSINVALIDERROR type case.
  *
  * This is BILLING_ADDRESS_INVALID_ERROR case.
  */
  export function isBILLINGADDRESSINVALIDERROR(value: unknown): value is BILLINGADDRESSINVALIDERROR {
    const validationResult = validateAndMap(value, bILLINGADDRESSINVALIDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SHIPPINGADDRESSINVALIDERROR type case.
  *
  * This is SHIPPING_ADDRESS_INVALID_ERROR case.
  */
  export function isSHIPPINGADDRESSINVALIDERROR(value: unknown): value is SHIPPINGADDRESSINVALIDERROR {
    const validationResult = validateAndMap(value, sHIPPINGADDRESSINVALIDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ORDERISPENDINGAPPROVAL type case.
  *
  * This is ORDER_IS_PENDING_APPROVAL case.
  */
  export function isORDERISPENDINGAPPROVAL(value: unknown): value is ORDERISPENDINGAPPROVAL {
    const validationResult = validateAndMap(value, oRDERISPENDINGAPPROVALSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to DEVICEDATANOTAVAILABLE type case.
  *
  * This is DEVICE_DATA_NOT_AVAILABLE case.
  */
  export function isDEVICEDATANOTAVAILABLE(value: unknown): value is DEVICEDATANOTAVAILABLE {
    const validationResult = validateAndMap(value, dEVICEDATANOTAVAILABLESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CURRENCYNOTSUPPORTEDFORBANK type case.
  *
  * This is CURRENCY_NOT_SUPPORTED_FOR_BANK case.
  */
  export function isCURRENCYNOTSUPPORTEDFORBANK(value: unknown): value is CURRENCYNOTSUPPORTEDFORBANK {
    const validationResult = validateAndMap(value, cURRENCYNOTSUPPORTEDFORBANKSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ONLYONEBANKSOURCEALLOWED type case.
  *
  * This is ONLY_ONE_BANK_SOURCE_ALLOWED case.
  */
  export function isONLYONEBANKSOURCEALLOWED(value: unknown): value is ONLYONEBANKSOURCEALLOWED {
    const validationResult = validateAndMap(value, oNLYONEBANKSOURCEALLOWEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDIBAN type case.
  *
  * This is INVALID_IBAN case.
  */
  export function isINVALIDIBAN(value: unknown): value is INVALIDIBAN {
    const validationResult = validateAndMap(value, iNVALIDIBANSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to IBANCOUNTRYNOTSUPPORTED type case.
  *
  * This is IBAN_COUNTRY_NOT_SUPPORTED case.
  */
  export function isIBANCOUNTRYNOTSUPPORTED(value: unknown): value is IBANCOUNTRYNOTSUPPORTED {
    const validationResult = validateAndMap(value, iBANCOUNTRYNOTSUPPORTEDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCE type case.
  *
  * This is PAYEE_COUNTRY_NOT_SUPPORTED_FOR_PAYMENT_SOURCE case.
  */
  export function isPAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCE(value: unknown): value is PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCE {
    const validationResult = validateAndMap(value, pAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCESchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CARDNUMBERREQUIRED type case.
  *
  * This is CARD_NUMBER_REQUIRED case.
  */
  export function isCARDNUMBERREQUIRED(value: unknown): value is CARDNUMBERREQUIRED {
    const validationResult = validateAndMap(value, cARDNUMBERREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CARDEXPIRYREQUIRED type case.
  *
  * This is CARD_EXPIRY_REQUIRED case.
  */
  export function isCARDEXPIRYREQUIRED(value: unknown): value is CARDEXPIRYREQUIRED {
    const validationResult = validateAndMap(value, cARDEXPIRYREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INCOMPATIBLEPARAMETERVALUEERROR type case.
  *
  * This is INCOMPATIBLE_PARAMETER_VALUE_ERROR case.
  */
  export function isINCOMPATIBLEPARAMETERVALUEERROR(value: unknown): value is INCOMPATIBLEPARAMETERVALUEERROR {
    const validationResult = validateAndMap(value, iNCOMPATIBLEPARAMETERVALUEERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to VAULTINSTRUCTIONDUPLICATEDERROR type case.
  *
  * This is VAULT_INSTRUCTION_DUPLICATED_ERROR case.
  */
  export function isVAULTINSTRUCTIONDUPLICATEDERROR(value: unknown): value is VAULTINSTRUCTIONDUPLICATEDERROR {
    const validationResult = validateAndMap(value, vAULTINSTRUCTIONDUPLICATEDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to VAULTINSTRUCTIONREQUIREDERROR type case.
  *
  * This is VAULT_INSTRUCTION_REQUIRED_ERROR case.
  */
  export function isVAULTINSTRUCTIONREQUIREDERROR(value: unknown): value is VAULTINSTRUCTIONREQUIREDERROR {
    const validationResult = validateAndMap(value, vAULTINSTRUCTIONREQUIREDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to MISMATCHEDVAULTIDTOPAYMENTSOURCEERROR type case.
  *
  * This is MISMATCHED_VAULT_ID_TO_PAYMENT_SOURCE_ERROR case.
  */
  export function isMISMATCHEDVAULTIDTOPAYMENTSOURCEERROR(value: unknown): value is MISMATCHEDVAULTIDTOPAYMENTSOURCEERROR {
    const validationResult = validateAndMap(value, mISMATCHEDVAULTIDTOPAYMENTSOURCEERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTELIGIBLEFORPNREFPROCESSINGERROR type case.
  *
  * This is NOT_ELIGIBLE_FOR_PNREF_PROCESSING_ERROR case.
  */
  export function isNOTELIGIBLEFORPNREFPROCESSINGERROR(value: unknown): value is NOTELIGIBLEFORPNREFPROCESSINGERROR {
    const validationResult = validateAndMap(value, nOTELIGIBLEFORPNREFPROCESSINGERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYPALIDPROCESSINGINELIGIBILITYERROR type case.
  *
  * This is PAYPAL_ID_PROCESSING_INELIGIBILITY_ERROR case.
  */
  export function isPAYPALIDPROCESSINGINELIGIBILITYERROR(value: unknown): value is PAYPALIDPROCESSINGINELIGIBILITYERROR {
    const validationResult = validateAndMap(value, pAYPALIDPROCESSINGINELIGIBILITYERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PAYPALTRANSACTIONIDNOTFOUNDERROR type case.
  *
  * This is PAYPAL_TRANSACTION_ID_NOT_FOUND_ERROR case.
  */
  export function isPAYPALTRANSACTIONIDNOTFOUNDERROR(value: unknown): value is PAYPALTRANSACTIONIDNOTFOUNDERROR {
    const validationResult = validateAndMap(value, pAYPALTRANSACTIONIDNOTFOUNDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to PNREFNOTFOUNDERROR type case.
  *
  * This is PNREF_NOT_FOUND_ERROR case.
  */
  export function isPNREFNOTFOUNDERROR(value: unknown): value is PNREFNOTFOUNDERROR {
    const validationResult = validateAndMap(value, pNREFNOTFOUNDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to INVALIDSECURITYCODELENGTHERROR type case.
  *
  * This is INVALID_SECURITY_CODE_LENGTH_ERROR case.
  */
  export function isINVALIDSECURITYCODELENGTHERROR(value: unknown): value is INVALIDSECURITYCODELENGTHERROR {
    const validationResult = validateAndMap(value, iNVALIDSECURITYCODELENGTHERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NOTENABLEDTOVAULTPAYMENTSOURCEERROR type case.
  *
  * This is NOT_ENABLED_TO_VAULT_PAYMENT_SOURCE_ERROR case.
  */
  export function isNOTENABLEDTOVAULTPAYMENTSOURCEERROR(value: unknown): value is NOTENABLEDTOVAULTPAYMENTSOURCEERROR {
    const validationResult = validateAndMap(value, nOTENABLEDTOVAULTPAYMENTSOURCEERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to CRYPTOGRAMISREQUIRED type case.
  *
  * This is CRYPTOGRAM_IS_REQUIRED case.
  */
  export function isCRYPTOGRAMISREQUIRED(value: unknown): value is CRYPTOGRAMISREQUIRED {
    const validationResult = validateAndMap(value, cRYPTOGRAMISREQUIREDSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to EMVDATAREQUIREDERROR type case.
  *
  * This is EMV_DATA_REQUIRED_ERROR case.
  */
  export function isEMVDATAREQUIREDERROR(value: unknown): value is EMVDATAREQUIREDERROR {
    const validationResult = validateAndMap(value, eMVDATAREQUIREDERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ALIASDECLINEDBYPROCESSORERROR type case.
  *
  * This is ALIAS_DECLINED_BY_PROCESSOR_ERROR case.
  */
  export function isALIASDECLINEDBYPROCESSORERROR(value: unknown): value is ALIASDECLINEDBYPROCESSORERROR {
    const validationResult = validateAndMap(value, aLIASDECLINEDBYPROCESSORERRORSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to BLIKONECLICKMISSINGREQUIREDPARAMETERERROR type case.
  *
  * This is BLIK_ONE_CLICK_MISSING_REQUIRED_PARAMETER_ERROR case.
  */
  export function isBLIKONECLICKMISSINGREQUIREDPARAMETERERROR(value: unknown): value is BLIKONECLICKMISSINGREQUIREDPARAMETERERROR {
    const validationResult = validateAndMap(value, bLIKONECLICKMISSINGREQUIREDPARAMETERERRORSchema);
    return validationResult.errors === false;
  }
}
