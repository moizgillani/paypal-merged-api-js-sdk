/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { OAuthToken } from './models/oAuthToken';
import { ClientInterface } from "./clientInterface";
import { OAuthAuthorizationController} from './controllers/oAuthAuthorizationController';
import { OAuthScopeOauth2Enum } from './models/oAuthScopeOauth2Enum';

export class Oauth2Manager {
  private _oAuthClientId: string;
  private _oAuthClientSecret: string;
  private _oAuthScopes?: OAuthScopeOauth2Enum[];
  private _oAuthController: OAuthAuthorizationController;

  constructor({
    oAuthClientId,
    oAuthClientSecret,
    oAuthScopes,
  }:{
    oAuthClientId: string,
    oAuthClientSecret: string,
    oAuthScopes?: OAuthScopeOauth2Enum[],
  }, client: ClientInterface) {
    this._oAuthClientId = oAuthClientId;
    this._oAuthClientSecret = oAuthClientSecret;
    this._oAuthScopes = oAuthScopes;
    this._oAuthController = new OAuthAuthorizationController(client);
  }

  public async fetchToken(
    additionalParams?: Record<string, unknown>
  ): Promise<OAuthToken> {
    const authorization = this.getClientBasicAuth(
      this._oAuthClientId,
      this._oAuthClientSecret
    );
    const { result } = await this._oAuthController.requestTokenOauth2(
      authorization,
      this._oAuthScopes?.join(' '),
      additionalParams
    );
    return this.setExpiry(result);
  }
  
  private getClientBasicAuth(clientId: string, clientSecret: string): string {
    return `Basic ${Buffer.from(clientId + ':' + clientSecret,).toString(
      'base64'
    )}`;
  }

  private async setExpiry(token: OAuthToken) {
    const newToken = token
    if (newToken.expiresIn) {
      newToken.expiry = BigInt(Math.round(Date.now() / 1000)) + newToken.expiresIn;
    }
    return newToken;
  }
}
