/**
 * Paypal Merged APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { CustomError } from '../errors/customError';
import {
  MinimalSetupToken,
  minimalSetupTokenSchema,
} from '../models/minimalSetupToken';
import { SetupToken, setupTokenSchema } from '../models/setupToken';
import { string } from '../schema';
import { BaseController } from './baseController';

export class SetupTokensController extends BaseController {
  /**
   * Creates a Setup Token from the given payment source and adds it to the Vault of the associated
   * customer.
   *
   * @param payPalRequestId   The server stores keys for 3 hours.
   * @param body              Setup Token creation with a instrument type optional financial
   *                                               instrument details and customer_id.
   * @return Response from the API call
   */
  async setupTokensCreate(
    payPalRequestId: string,
    body: SetupToken,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MinimalSetupToken>> {
    const req = this.createRequest('POST', '/v3/vault/setup-tokens');
    req.baseUrl('default_Payment Method Tokens');
    const mapped = req.prepareArgs({
      payPalRequestId: [payPalRequestId, string()],
      body: [body, setupTokenSchema],
    });
    req.header('PayPal-Request-Id', mapped.payPalRequestId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, CustomError, 'Request is not well-formed, syntactically incorrect, or violates schema.');
    req.throwOn(403, CustomError, 'Authorization failed due to insufficient permissions.');
    req.throwOn(422, CustomError, 'The requested action could not be performed, semantically incorrect, or failed business validation.');
    req.throwOn(500, CustomError, 'An internal server error has occurred.');
    return req.callAsJson(minimalSetupTokenSchema, requestOptions);
  }

  /**
   * Returns a readable representation of temporarily vaulted payment source associated with the setup
   * token id.
   *
   * @param id A representation of a vault token.
   * @return Response from the API call
   */
  async setupTokensGet(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MinimalSetupToken>> {
    const req = this.createRequest('GET');
    req.baseUrl('default_Payment Method Tokens');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/v3/vault/setup-tokens/${mapped.id}`;
    req.throwOn(403, CustomError, 'Authorization failed due to insufficient permissions.');
    req.throwOn(404, CustomError, 'The specified resource does not exist.');
    req.throwOn(422, CustomError, 'The requested action could not be performed, semantically incorrect, or failed business validation.');
    req.throwOn(500, CustomError, 'An internal server error has occurred.');
    return req.callAsJson(minimalSetupTokenSchema, requestOptions);
  }
}
