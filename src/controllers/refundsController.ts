/**
 * Paypal Merged APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  RefundsGetResponse401JsonError,
} from '../errors/refundsGetResponse401JsonError';
import {
  RefundsGetResponse403JsonError,
} from '../errors/refundsGetResponse403JsonError';
import {
  RefundsGetResponse404JsonError,
} from '../errors/refundsGetResponse404JsonError';
import { RefundPayments, refundPaymentsSchema } from '../models/refundPayments';
import { string } from '../schema';
import { BaseController } from './baseController';

export class RefundsController extends BaseController {
  /**
   * Shows details for a refund, by ID.
   *
   * @param refundId  The PayPal-generated ID for the refund for which to show details.
   * @return Response from the API call
   */
  async refundsGet(
    refundId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RefundPayments>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ refundId: [refundId, string()] });
    req.appendTemplatePath`/v2/payments/refunds/${mapped.refundId}`;
    req.throwOn(401, RefundsGetResponse401JsonError, 'Authentication failed due to missing authorization header, or invalid authentication credentials.');
    req.throwOn(403, RefundsGetResponse403JsonError, 'The request failed because the caller has insufficient permissions.');
    req.throwOn(404, RefundsGetResponse404JsonError, 'The request failed because the resource does not exist.');
    req.throwOn(500, ApiError, 'The request failed because an internal server error occurred.');
    req.defaultToError(ApiError, 'The default response.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(refundPaymentsSchema, requestOptions);
  }
}
