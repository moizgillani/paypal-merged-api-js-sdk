/**
 * Paypal Merged APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { BadRequestError1Error } from '../errors/badRequestError1Error';
import {
  CaptureOrdersUnprocessableRequestError,
} from '../errors/captureOrdersUnprocessableRequestError';
import { ForbiddenError1Error } from '../errors/forbiddenError1Error';
import { M500ErrorError } from '../errors/m500ErrorError';
import {
  OrdersAuthorizeResponse403JsonError,
} from '../errors/ordersAuthorizeResponse403JsonError';
import {
  OrdersAuthorizeResponse404JsonError,
} from '../errors/ordersAuthorizeResponse404JsonError';
import {
  OrdersAuthorizeResponse422JsonError,
} from '../errors/ordersAuthorizeResponse422JsonError';
import {
  OrdersConfirmResponse403JsonError,
} from '../errors/ordersConfirmResponse403JsonError';
import {
  OrdersConfirmResponse422JsonError,
} from '../errors/ordersConfirmResponse422JsonError';
import {
  OrdersPatchResponse404JsonError,
} from '../errors/ordersPatchResponse404JsonError';
import {
  OrdersPatchResponse422JsonError,
} from '../errors/ordersPatchResponse422JsonError';
import {
  OrdersTrackCreateResponse403JsonError,
} from '../errors/ordersTrackCreateResponse403JsonError';
import {
  OrdersTrackCreateResponse404JsonError,
} from '../errors/ordersTrackCreateResponse404JsonError';
import {
  OrdersTrackCreateResponse422JsonError,
} from '../errors/ordersTrackCreateResponse422JsonError';
import {
  OrdersTrackersPatchResponse403JsonError,
} from '../errors/ordersTrackersPatchResponse403JsonError';
import {
  OrdersTrackersPatchResponse404JsonError,
} from '../errors/ordersTrackersPatchResponse404JsonError';
import {
  OrdersTrackersPatchResponse422JsonError,
} from '../errors/ordersTrackersPatchResponse422JsonError';
import { ResourceNotFoundError } from '../errors/resourceNotFoundError';
import {
  UnauthorizedRequestError1Error,
} from '../errors/unauthorizedRequestError1Error';
import {
  UnprocessableRequestError1Error,
} from '../errors/unprocessableRequestError1Error';
import {
  AuthorizeRequest,
  authorizeRequestSchema,
} from '../models/authorizeRequest';
import {
  ConfirmOrderRequest,
  confirmOrderRequestSchema,
} from '../models/confirmOrderRequest';
import { Order, orderSchema } from '../models/order';
import {
  OrderAuthorizeResponse,
  orderAuthorizeResponseSchema,
} from '../models/orderAuthorizeResponse';
import {
  OrderCaptureRequest,
  orderCaptureRequestSchema,
} from '../models/orderCaptureRequest';
import { OrderRequest, orderRequestSchema } from '../models/orderRequest';
import {
  OrderTrackerRequest,
  orderTrackerRequestSchema,
} from '../models/orderTrackerRequest';
import { Patch, patchSchema } from '../models/patch';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';

export class OrdersController extends BaseController {
  /**
   * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and
   * payment processing costs. For more information about processing payments, see <a href="https:
   * //developer.paypal.com/docs/checkout/advanced/processing/">checkout</a> or <a href="https:
   * //developer.paypal.com/docs/multiparty/checkout/advanced/processing/">multiparty checkout</a>.
   * <blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a
   * href="/api/rest/reference/orders/v2/errors/#create-order">Orders v2 errors</a>.</blockquote>
   *
   * @param payPalRequestId               The server stores keys for 6 hours. The API callers
   *                                                             can request the times to up to 72 hours by speaking to
   *                                                             their Account Manager.
   * @param body
   * @param payPalPartnerAttributionId
   * @param payPalClientMetadataId
   * @param prefer                        The preferred server response upon successful
   *                                                             completion of the request. Value is:return=minimal.
   *                                                             The server returns a minimal response to optimize
   *                                                             communication between the API caller and the server. A
   *                                                             minimal response includes the <code>id</code>,
   *                                                             <code>status</code> and HATEOAS links.
   *                                                             return=representation. The server returns a complete
   *                                                             resource representation, including the current state
   *                                                             of the resource.
   * @return Response from the API call
   */
  async createOrder(
    payPalRequestId: string,
    body: OrderRequest,
    payPalPartnerAttributionId?: string,
    payPalClientMetadataId?: string,
    prefer?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Order>> {
    const req = this.createRequest('POST', '/v2/checkout/orders');
    const mapped = req.prepareArgs({
      payPalRequestId: [payPalRequestId, string()],
      body: [body, orderRequestSchema],
      payPalPartnerAttributionId: [
        payPalPartnerAttributionId,
        optional(string()),
      ],
      payPalClientMetadataId: [payPalClientMetadataId, optional(string())],
      prefer: [prefer, optional(string())],
    });
    req.header('PayPal-Request-Id', mapped.payPalRequestId);
    req.header('Content-Type', 'application/json');
    req.header('PayPal-Partner-Attribution-Id', mapped.payPalPartnerAttributionId);
    req.header('PayPal-Client-Metadata-Id', mapped.payPalClientMetadataId);
    req.header('Prefer', mapped.prefer);
    req.json(mapped.body);
    req.throwOn(400, BadRequestError1Error, 'Request is not well-formed, syntactically incorrect, or violates schema.');
    req.throwOn(401, UnauthorizedRequestError1Error, 'Authentication failed due to missing authorization header, or invalid authentication credentials.');
    req.throwOn(422, UnprocessableRequestError1Error, 'The requested action could not be performed, semantically incorrect, or failed business validation.');
    req.defaultToError(ApiError, 'The default response.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(orderSchema, requestOptions);
  }

  /**
   * Shows details for an order, by ID.<blockquote><strong>Note:</strong> For error handling and
   * troubleshooting, see <a href="/api/rest/reference/orders/v2/errors/#get-order">Orders v2 errors</a>.
   * </blockquote>
   *
   * @param id     The ID of the order for which to update payment details.
   * @param fields A comma-separated list of fields that should be returned for the order. Valid filter
   *                         field is `payment_source`.
   * @return Response from the API call
   */
  async getOrder(
    id: string,
    fields?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Order>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      fields: [fields, optional(string())],
    });
    req.query('fields', mapped.fields);
    req.appendTemplatePath`/v2/checkout/orders/${mapped.id}`;
    req.throwOn(401, UnauthorizedRequestError1Error, 'Authentication failed due to missing authorization header, or invalid authentication credentials.');
    req.throwOn(404, ResourceNotFoundError, 'The specified resource does not exist.');
    req.defaultToError(ApiError, 'The default response.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(orderSchema, requestOptions);
  }

  /**
   * Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the
   * `COMPLETED` status.<br/><br/>To make an update, you must provide a `reference_id`. If you omit this
   * value with an order that contains only one purchase unit, PayPal sets the value to `default` which
   * enables you to use the path: <code>"/purchase_units/@reference_id=='default'/{attribute-or-
   * object}"</code>. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and
   * payment processing costs. For more information about processing payments, see <a href="https:
   * //developer.paypal.com/docs/checkout/advanced/processing/">checkout</a> or <a href="https:
   * //developer.paypal.com/docs/multiparty/checkout/advanced/processing/">multiparty checkout</a>.
   * <blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a
   * href="/api/rest/reference/orders/v2/errors/#patch-order">Orders v2 errors</a>.</blockquote>Patchable
   * attributes or objects:
   * <br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody><tr><td><code>inte
   * nt</code></td><td>replace</td><td></td></tr><tr><td><code>payer</code></td><td>replace,
   * add</td><td>Using replace op for <code>payer</code> will replace the whole <code>payer</code> object
   * with the value sent in request.</td></tr><tr><td><code>purchase_units</code></td><td>replace,
   * add</td><td></td></tr><tr><td><code>purchase_units[].custom_id</code></td><td>replace, add,
   * remove</td><td></td></tr><tr><td><code>purchase_units[].description</code></td><td>replace, add,
   * remove</td><td></td></tr><tr><td><code>purchase_units[].payee.
   * email</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].shipping.
   * name</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.
   * address</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.
   * type</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].
   * soft_descriptor</code></td><td>replace, remove</td><td></td></tr><tr><td><code>purchase_units[].
   * amount</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].
   * items</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].
   * invoice_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].
   * payment_instruction</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].
   * payment_instruction.disbursement_mode</code></td><td>replace</td><td>By default,
   * <code>disbursement_mode</code> is <code>INSTANT</code>.</td></tr><tr><td><code>purchase_units[].
   * payment_instruction.platform_fees</code></td><td>replace, add,
   * remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.
   * airline</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].
   * supplementary_data.card</code></td><td>replace, add,
   * remove</td><td></td></tr><tr><td><code>application_context.
   * client_configuration</code></td><td>replace, add</td><td></td></tr></tbody></table>
   *
   * @param id           The ID of the order for which to update payment details.
   * @param body
   * @return Response from the API call
   */
  async ordersPatch(
    id: string,
    body?: Patch[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, optional(array(patchSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v2/checkout/orders/${mapped.id}`;
    req.throwOn(400, BadRequestError1Error, 'Request is not well-formed, syntactically incorrect, or violates schema.');
    req.throwOn(401, UnauthorizedRequestError1Error, 'Authentication failed due to missing authorization header, or invalid authentication credentials.');
    req.throwOn(404, OrdersPatchResponse404JsonError, 'The specified resource does not exist.');
    req.throwOn(422, OrdersPatchResponse422JsonError, 'The requested action could not be performed, semantically incorrect, or failed business validation.');
    req.defaultToError(ApiError, 'The default response.');
    req.authenticate([{ oauth2: true }]);
    return req.call(requestOptions);
  }

  /**
   * Authorizes payment for an order. To successfully authorize payment for an order, the buyer must
   * first approve the order or a valid payment_source must be provided in the request. A buyer can
   * approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS
   * links in the create order response.<blockquote><strong>Note:</strong> For error handling and
   * troubleshooting, see <a href="/api/rest/reference/orders/v2/errors/#authorize-order">Orders v2
   * errors</a>.</blockquote>
   *
   * @param id                        The ID of the order for which to update payment
   *                                                             details.
   * @param payPalRequestId           The server stores keys for 6 hours. The API callers
   *                                                             can request the times to up to 72 hours by speaking to
   *                                                             their Account Manager.
   * @param prefer                    The preferred server response upon successful
   *                                                             completion of the request. Value is:return=minimal.
   *                                                             The server returns a minimal response to optimize
   *                                                             communication between the API caller and the server. A
   *                                                             minimal response includes the <code>id</code>,
   *                                                             <code>status</code> and HATEOAS links.
   *                                                             return=representation. The server returns a complete
   *                                                             resource representation, including the current state
   *                                                             of the resource.
   * @param payPalClientMetadataId
   * @param payPalAuthAssertion       An API-caller-provided JSON Web Token (JWT) assertion
   *                                                             that identifies the merchant. For details, see <a
   *                                                             href="/api/rest/requests/#paypal-auth-
   *                                                             assertion">PayPal-Auth-Assertion</a>.
   * @param body
   * @return Response from the API call
   */
  async ordersAuthorize(
    id: string,
    payPalRequestId: string,
    prefer?: string,
    payPalClientMetadataId?: string,
    payPalAuthAssertion?: string,
    body?: AuthorizeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OrderAuthorizeResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      id: [id, string()],
      payPalRequestId: [payPalRequestId, string()],
      prefer: [prefer, optional(string())],
      payPalClientMetadataId: [payPalClientMetadataId, optional(string())],
      payPalAuthAssertion: [payPalAuthAssertion, optional(string())],
      body: [body, optional(authorizeRequestSchema)],
    });
    req.header('PayPal-Request-Id', mapped.payPalRequestId);
    req.header('Content-Type', 'application/json');
    req.header('Prefer', mapped.prefer);
    req.header('PayPal-Client-Metadata-Id', mapped.payPalClientMetadataId);
    req.header('PayPal-Auth-Assertion', mapped.payPalAuthAssertion);
    req.json(mapped.body);
    req.appendTemplatePath`/v2/checkout/orders/${mapped.id}/authorize`;
    req.throwOn(400, BadRequestError1Error, 'Request is not well-formed, syntactically incorrect, or violates schema.');
    req.throwOn(401, UnauthorizedRequestError1Error, 'Authentication failed due to missing authorization header, or invalid authentication credentials.');
    req.throwOn(403, OrdersAuthorizeResponse403JsonError, 'The authorized payment failed due to insufficient permissions.');
    req.throwOn(404, OrdersAuthorizeResponse404JsonError, 'The specified resource does not exist.');
    req.throwOn(422, OrdersAuthorizeResponse422JsonError, 'The requested action could not be performed, semantically incorrect, or failed business validation.');
    req.throwOn(500, M500ErrorError, 'An internal server error has occurred.');
    req.defaultToError(ApiError, 'The default response.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(orderAuthorizeResponseSchema, requestOptions);
  }

  /**
   * Captures payment for an order. To successfully capture payment for an order, the buyer must first
   * approve the order or a valid payment_source must be provided in the request. A buyer can approve the
   * order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the
   * create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see
   * <a href="/api/rest/reference/orders/v2/errors/#capture-order">Orders v2 errors</a>.</blockquote>
   *
   * @param id                        The ID of the order for which to update payment
   *                                                                details.
   * @param payPalRequestId           The server stores keys for 6 hours. The API
   *                                                                callers can request the times to up to 72 hours by
   *                                                                speaking to their Account Manager.
   * @param prefer                    The preferred server response upon successful
   *                                                                completion of the request. Value is:return=minimal.
   *                                                                The server returns a minimal response to optimize
   *                                                                communication between the API caller and the server.
   *                                                                A minimal response includes the <code>id</code>,
   *                                                                <code>status</code> and HATEOAS links.
   *                                                                return=representation. The server returns a
   *                                                                complete resource representation, including the
   *                                                                current state of the resource.
   * @param payPalClientMetadataId
   * @param payPalAuthAssertion       An API-caller-provided JSON Web Token (JWT)
   *                                                                assertion that identifies the merchant. For details,
   *                                                                see <a href="/api/rest/requests/#paypal-auth-
   *                                                                assertion">PayPal-Auth-Assertion</a>.
   * @param body
   * @return Response from the API call
   */
  async captureOrder(
    id: string,
    payPalRequestId: string,
    prefer?: string,
    payPalClientMetadataId?: string,
    payPalAuthAssertion?: string,
    body?: OrderCaptureRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Order>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      id: [id, string()],
      payPalRequestId: [payPalRequestId, string()],
      prefer: [prefer, optional(string())],
      payPalClientMetadataId: [payPalClientMetadataId, optional(string())],
      payPalAuthAssertion: [payPalAuthAssertion, optional(string())],
      body: [body, optional(orderCaptureRequestSchema)],
    });
    req.header('PayPal-Request-Id', mapped.payPalRequestId);
    req.header('Content-Type', 'application/json');
    req.header('Prefer', mapped.prefer);
    req.header('PayPal-Client-Metadata-Id', mapped.payPalClientMetadataId);
    req.header('PayPal-Auth-Assertion', mapped.payPalAuthAssertion);
    req.json(mapped.body);
    req.appendTemplatePath`/v2/checkout/orders/${mapped.id}/capture`;
    req.throwOn(400, BadRequestError1Error, 'Request is not well-formed, syntactically incorrect, or violates schema.');
    req.throwOn(401, UnauthorizedRequestError1Error, 'Authentication failed due to missing authorization header, or invalid authentication credentials.');
    req.throwOn(403, ForbiddenError1Error, 'The authorized payment failed due to insufficient permissions.');
    req.throwOn(404, ResourceNotFoundError, 'The specified resource does not exist.');
    req.throwOn(422, CaptureOrdersUnprocessableRequestError, 'The requested action could not be performed, semantically incorrect, or failed business validation.');
    req.throwOn(500, M500ErrorError, 'An internal server error has occurred.');
    req.defaultToError(ApiError, 'The default response.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(orderSchema, requestOptions);
  }

  /**
   * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes or
   * objects:
   * <br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody></tr><tr><td><code
   * >items</code></td><td>replace</td><td>Using replace op for <code>items</code> will replace the
   * entire <code>items</code> object with the value sent in request.
   * </td></tr><tr><td><code>notify_payer</code></td><td>replace,
   * add</td><td></td></tr><tr><td><code>status</code></td><td>replace</td><td>Only patching status to
   * CANCELLED is currently supported.</td></tr></tbody></table>
   *
   * @param id           The ID of the order for which to update payment details.
   * @param trackerId    The order tracking ID.
   * @param body
   * @return Response from the API call
   */
  async ordersTrackersPatch(
    id: string,
    trackerId: string,
    body?: Patch[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      id: [id, string()],
      trackerId: [trackerId, string()],
      body: [body, optional(array(patchSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v2/checkout/orders/${mapped.id}/trackers/${mapped.trackerId}`;
    req.throwOn(400, BadRequestError1Error, 'Request is not well-formed, syntactically incorrect, or violates schema.');
    req.throwOn(403, OrdersTrackersPatchResponse403JsonError, 'Authorization failed due to insufficient permissions.');
    req.throwOn(404, OrdersTrackersPatchResponse404JsonError, 'The specified resource does not exist.');
    req.throwOn(422, OrdersTrackersPatchResponse422JsonError, 'The requested action could not be performed, semantically incorrect, or failed business validation.');
    req.throwOn(500, M500ErrorError, 'An internal server error has occurred.');
    req.defaultToError(ApiError, 'The default response.');
    req.authenticate([{ oauth2: true }]);
    return req.call(requestOptions);
  }

  /**
   * Payer confirms their intent to pay for the the Order with the given payment source.
   *
   * @param id                        The ID of the order for which to update payment
   *                                                                details.
   * @param payPalClientMetadataId
   * @param prefer                    The preferred server response upon successful
   *                                                                completion of the request. Value is:return=minimal.
   *                                                                The server returns a minimal response to optimize
   *                                                                communication between the API caller and the server.
   *                                                                A minimal response includes the <code>id</code>,
   *                                                                <code>status</code> and HATEOAS links.
   *                                                                return=representation. The server returns a
   *                                                                complete resource representation, including the
   *                                                                current state of the resource.
   * @param body
   * @return Response from the API call
   */
  async ordersConfirm(
    id: string,
    payPalClientMetadataId?: string,
    prefer?: string,
    body?: ConfirmOrderRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Order>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      id: [id, string()],
      payPalClientMetadataId: [payPalClientMetadataId, optional(string())],
      prefer: [prefer, optional(string())],
      body: [body, optional(confirmOrderRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('PayPal-Client-Metadata-Id', mapped.payPalClientMetadataId);
    req.header('Prefer', mapped.prefer);
    req.json(mapped.body);
    req.appendTemplatePath`/v2/checkout/orders/${mapped.id}/confirm-payment-source`;
    req.throwOn(400, BadRequestError1Error, 'Request is not well-formed, syntactically incorrect, or violates schema.');
    req.throwOn(403, OrdersConfirmResponse403JsonError, 'Authorization failed due to insufficient permissions.');
    req.throwOn(422, OrdersConfirmResponse422JsonError, 'The requested action could not be performed, semantically incorrect, or failed business validation.');
    req.throwOn(500, M500ErrorError, 'An internal server error has occurred.');
    req.defaultToError(ApiError, 'The default response.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(orderSchema, requestOptions);
  }

  /**
   * Adds tracking information for an Order.
   *
   * @param id                    The ID of the order for which to update payment
   *                                                            details.
   * @param body
   * @param payPalAuthAssertion   An API-caller-provided JSON Web Token (JWT) assertion
   *                                                            that identifies the merchant. For details, see <a
   *                                                            href="/api/rest/requests/#paypal-auth-assertion">PayPal-
   *                                                            Auth-Assertion</a>.
   * @return Response from the API call
   */
  async ordersTrackCreate(
    id: string,
    body: OrderTrackerRequest,
    payPalAuthAssertion?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Order>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, orderTrackerRequestSchema],
      payPalAuthAssertion: [payPalAuthAssertion, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.header('PayPal-Auth-Assertion', mapped.payPalAuthAssertion);
    req.json(mapped.body);
    req.appendTemplatePath`/v2/checkout/orders/${mapped.id}/track`;
    req.throwOn(400, BadRequestError1Error, 'Request is not well-formed, syntactically incorrect, or violates schema.');
    req.throwOn(403, OrdersTrackCreateResponse403JsonError, 'Authorization failed due to insufficient permissions.');
    req.throwOn(404, OrdersTrackCreateResponse404JsonError, 'The specified resource does not exist.');
    req.throwOn(422, OrdersTrackCreateResponse422JsonError, 'The requested action could not be performed, semantically incorrect, or failed business validation.');
    req.throwOn(500, M500ErrorError, 'An internal server error has occurred.');
    req.defaultToError(ApiError, 'The default response.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(orderSchema, requestOptions);
  }
}
